/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CadastrarRecaptura.java
 *
 * Created on 14/02/2011, 18:44:34
 */

package telas;

import banco.BD_Recaptura;
import banco.BD_Epoca;
import banco.BD_TipoRecaptura;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.AbstractCellEditor;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import objetos.Kernel;
import objetos.Recaptura;
import objetos.Epoca;
import objetos.TipoRecaptura;
import objetos.Animal;

/**
 *
 * @author vagner
 */
public class CadastrarRecaptura extends javax.swing.JPanel {

    private Kernel              kernel;         
    private Recaptura           obj_Recaptura;
    private Epoca               obj_Epoca;
    private TipoRecaptura       obj_TipoRecaptura;
    private Animal              obj_Animal;
    private BD_Recaptura        bd_Recaptura;
    private BD_Epoca            bd_Epoca;
    private BD_TipoRecaptura    bd_TipoRecaptura;
    private int                 acao;
    private Object              objeto;
    private final int editar  = 4;
    private final int excluir = 5;
    
    /** Creates new form CadastrarAnimais */
    public CadastrarRecaptura(Kernel obj,int acao,Object ob) {
        kernel      = obj;
        this.acao   = acao;
        this.objeto = ob;
        initComponents();                
        this.TabelaRecaptura();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        painel_cadastrar_area3 = new javax.swing.JPanel();
        botao_salvar = new javax.swing.JButton();
        Recaptura_id = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        combo_Epoca = new javax.swing.JComboBox();
        busca_localcoleta = new javax.swing.JButton();
        TipoRecaptura_id = new javax.swing.JLabel();
        busca_gorduradestino = new javax.swing.JButton();
        combo_TipoRecaptura = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        Epoca_id = new javax.swing.JLabel();
        Animal_id = new javax.swing.JLabel();
        botao_voltar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        campo_dia = new javax.swing.JTextField();
        campo_mes = new javax.swing.JTextField();
        campo_ano = new javax.swing.JTextField();
        sp = new javax.swing.JScrollPane();
        tabela_Recaptura = new javax.swing.JTable();

        jLabel2.setText("jLabel2");

        setBackground(new java.awt.Color(204, 204, 204));

        painel_cadastrar_area3.setBackground(new java.awt.Color(204, 204, 204));
        painel_cadastrar_area3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        botao_salvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/salvar.png"))); // NOI18N
        botao_salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_salvarActionPerformed(evt);
            }
        });

        Recaptura_id.setText("0");

        jLabel1.setText("Epoca:");

        combo_Epoca.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_Epoca.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_EpocaItemStateChanged(evt);
            }
        });

        busca_localcoleta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/question.gif"))); // NOI18N
        busca_localcoleta.setToolTipText("Caso não tenha a temporada, cadastre aqui.");
        busca_localcoleta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busca_localcoletaActionPerformed(evt);
            }
        });

        TipoRecaptura_id.setBackground(new java.awt.Color(0, 0, 0));
        TipoRecaptura_id.setText("0");

        busca_gorduradestino.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/question.gif"))); // NOI18N
        busca_gorduradestino.setToolTipText("Caso não tenha a temporada, cadastre aqui.");
        busca_gorduradestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busca_gorduradestinoActionPerformed(evt);
            }
        });

        combo_TipoRecaptura.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_TipoRecaptura.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_TipoRecapturaItemStateChanged(evt);
            }
        });

        jLabel3.setText("Tipo recaptura:");

        Epoca_id.setBackground(new java.awt.Color(0, 0, 0));
        Epoca_id.setText("0");

        Animal_id.setText("0");

        botao_voltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/back.png"))); // NOI18N
        botao_voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_voltarActionPerformed(evt);
            }
        });

        jLabel4.setText("Data:");

        org.jdesktop.layout.GroupLayout painel_cadastrar_area3Layout = new org.jdesktop.layout.GroupLayout(painel_cadastrar_area3);
        painel_cadastrar_area3.setLayout(painel_cadastrar_area3Layout);
        painel_cadastrar_area3Layout.setHorizontalGroup(
            painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                .addContainerGap()
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel1)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel4)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(combo_TipoRecaptura, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(campo_dia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(campo_mes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(campo_ano, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(Animal_id)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Epoca_id)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(TipoRecaptura_id)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Recaptura_id))
                    .add(combo_Epoca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(11, 11, 11)
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, busca_gorduradestino, 0, 0, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, busca_localcoleta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(botao_voltar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(botao_salvar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        painel_cadastrar_area3Layout.setVerticalGroup(
            painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(4, 4, 4)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(busca_localcoleta)
                            .add(jLabel1)
                            .add(combo_Epoca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(busca_gorduradestino)
                            .add(jLabel3)
                            .add(combo_TipoRecaptura, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(campo_dia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(campo_mes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(campo_ano, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(Recaptura_id)
                            .add(TipoRecaptura_id)
                            .add(Epoca_id)
                            .add(Animal_id)))
                    .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, botao_voltar, 0, 0, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, botao_salvar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabela_Recaptura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "Cod", "Data", "Epoca", "Tipo Recap.", "Editar", "Excluir"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela_Recaptura.setDragEnabled(true);
        tabela_Recaptura.setRowHeight(25);
        tabela_Recaptura.getTableHeader().setReorderingAllowed(false);
        sp.setViewportView(tabela_Recaptura);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(sp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(painel_cadastrar_area3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(171, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(painel_cadastrar_area3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botao_salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_salvarActionPerformed
        // TODO add your handling code here:
        SalvarRecaptura();
}//GEN-LAST:event_botao_salvarActionPerformed

    private void combo_EpocaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_EpocaItemStateChanged
        // TODO add your handling code here:
        Epoca_id.setText(String.valueOf(bd_Epoca.getEpocaIDNome((String)combo_Epoca.getSelectedItem())));
    }//GEN-LAST:event_combo_EpocaItemStateChanged

    private void busca_localcoletaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busca_localcoletaActionPerformed
        // TODO add your handling code here:
        /*
        objeto = null;
        if((!Epoca_id.getText().equals("0"))||(!TipoRecaptura_id.getText().equals("0"))){
            objeto = Epoca_id.getText()+"-"+TipoRecaptura_id.getText()+"-"+Recaptura_id.getText();
        }
         kernel.Tela(9,kernel,1,objeto);    
         * 
         */
    }//GEN-LAST:event_busca_localcoletaActionPerformed

    private void busca_gorduradestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busca_gorduradestinoActionPerformed
        // TODO add your handling code here:
        /*
        objeto = null;
        if((!Epoca_id.getText().equals("0"))||(!TipoRecaptura_id.getText().equals("0"))){
            objeto = Epoca_id.getText()+"-"+TipoRecaptura_id.getText()+"-"+Recaptura_id.getText();
        }
         kernel.Tela(8,kernel,1,objeto);  
         * 
         */
    }//GEN-LAST:event_busca_gorduradestinoActionPerformed

    private void combo_TipoRecapturaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_TipoRecapturaItemStateChanged
        // TODO add your handling code here:
        TipoRecaptura_id.setText(String.valueOf(bd_TipoRecaptura.getTipoRecapturaIDNome((String)combo_TipoRecaptura.getSelectedItem())));
    }//GEN-LAST:event_combo_TipoRecapturaItemStateChanged

    private void botao_voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_voltarActionPerformed
        // TODO add your handling code here:
        kernel.Tela(21,null,2,Animal_id.getText(),null);
}//GEN-LAST:event_botao_voltarActionPerformed

    //SALVAR Recaptura
    private void SalvarRecaptura(){
        
        bd_Recaptura          = new BD_Recaptura(kernel);        
        obj_Recaptura         = new Recaptura();
        obj_Epoca             = new Epoca();
        obj_TipoRecaptura     = new TipoRecaptura();
        obj_Animal            = new Animal();
        
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();

        if(Recaptura_id.getText().equals("0")){
                                
            //SETANDO EPOCA
            obj_Epoca.setEpoca_id(Integer.parseInt(Epoca_id.getText()));

            //SETANDO TIPORECAPTURA
            obj_TipoRecaptura.setTiporecaptura_id(Integer.parseInt(TipoRecaptura_id.getText()));

            //SETANDO ANIMAL
            obj_Animal.setAnimal_id(Integer.parseInt(Animal_id.getText()));

            //SETANDO DATA
            String sDate = campo_ano.getText()+"-"+campo_mes.getText()+"-"+campo_dia.getText();
            try {
                obj_Recaptura.setData(dateFormat.parse(sDate));
            } catch (ParseException ex) {
                Logger.getLogger(CadastrarData.class.getName()).log(Level.SEVERE, null, ex);
            }

            obj_Recaptura.setEpoca(obj_Epoca);
            obj_Recaptura.setTiporecaptura(obj_TipoRecaptura);
            obj_Recaptura.setAnimal(obj_Animal);

            if((!TipoRecaptura_id.getText().equals("0"))||(!Epoca_id.getText().equals("0"))){
                    bd_Recaptura.Salvar(obj_Recaptura);
                }
        }else{                        
                //SETANDO EPOCA
            obj_Epoca.setEpoca_id(Integer.parseInt(Epoca_id.getText()));

            //SETANDO TIPORECAPTURA
            obj_TipoRecaptura.setTiporecaptura_id(Integer.parseInt(TipoRecaptura_id.getText()));

            //SETANDO ANIMAL
            obj_Animal.setAnimal_id(Integer.parseInt(Animal_id.getText()));

            //SETANDO DATA
            String sDate = campo_ano.getText()+"-"+campo_mes.getText()+"-"+campo_dia.getText();
            try {
                obj_Recaptura.setData(dateFormat.parse(sDate));
            } catch (ParseException ex) {
                Logger.getLogger(CadastrarData.class.getName()).log(Level.SEVERE, null, ex);
            }

            obj_Recaptura.setEpoca(obj_Epoca);
            obj_Recaptura.setTiporecaptura(obj_TipoRecaptura);
            obj_Recaptura.setAnimal(obj_Animal);
            obj_Recaptura.setRecaptura_id(Integer.parseInt(Recaptura_id.getText()));
                            
            bd_Recaptura.Atualizar(obj_Recaptura);
        }
        TabelaRecaptura();
        combo_Epoca.setSelectedIndex(0);
        combo_TipoRecaptura.setSelectedIndex(0);
        //PREENCHER A TABELA DE DADOS COM AS ÁREAS
        
    }
    
    //TABELA Recaptura
    public void TabelaRecaptura(){
        
        bd_Recaptura       = new BD_Recaptura(kernel);
        bd_TipoRecaptura   = new BD_TipoRecaptura(kernel);
        bd_Epoca           = new BD_Epoca(kernel);
        obj_Recaptura      = new Recaptura();
        obj_Epoca          = new Epoca();
        obj_TipoRecaptura  = new TipoRecaptura();
        
        //SENTANDO OS OBJETOS CARREGADOS
        if(objeto instanceof String){
            String vet[] = ((String)objeto).split("-");
            TipoRecaptura_id.setText(vet[0]);
            Epoca_id.setText(vet[1]);
            Recaptura_id.setText(vet[2]);
        }else if(objeto instanceof Integer){
            Animal_id.setText(String.valueOf((Integer)objeto));
        }
        /********* PREENCHENDO O VETOR Epoca *************/
        Epoca[] Epoca_vetor = null;
        try {
                Epoca_vetor = bd_Epoca.getEpocas();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarRecaptura.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados1[] = new String[Epoca_vetor.length];

        Epoca obj_Epoca = new Epoca();
        int pos = 0;
        for(int i=0; i < Epoca_vetor.length; i++){
            obj_Epoca = (Epoca)Epoca_vetor[i];
            dados1[i] = String.valueOf(obj_Epoca.getNome()).toUpperCase();
            if(acao!=0){                
                    if(Integer.parseInt(Epoca_id.getText())==obj_Epoca.getEpoca_id()){
                        Epoca_id.setText(String.valueOf(obj_Epoca.getEpoca_id()));
                        pos = i;
                    }           
            }else if(i==0){
                Epoca_id.setText(String.valueOf(obj_Epoca.getEpoca_id()));
            }
        }
        combo_Epoca.setModel(new javax.swing.DefaultComboBoxModel(dados1));
        
        if(acao!=0){
            combo_Epoca.setSelectedIndex(pos);
        }        
        /*****************************************************************/        
        /********* PREENCHENDO O VETOR TipoRecaptura *************/
        TipoRecaptura[] TipoRecaptura_vetor = null;
        try {
                TipoRecaptura_vetor = bd_TipoRecaptura.getTipoRecapturas();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarRecaptura.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados2[] = new String[TipoRecaptura_vetor.length];

        TipoRecaptura obj_TipoRecaptura = new TipoRecaptura();
        int pos1 = 0;
        for(int i=0; i < TipoRecaptura_vetor.length; i++){
            obj_TipoRecaptura = (TipoRecaptura)TipoRecaptura_vetor[i];
            dados2[i] = String.valueOf(obj_TipoRecaptura.getNome()).toUpperCase();
            if(acao!=0){                
                    if(Integer.parseInt(TipoRecaptura_id.getText())==obj_TipoRecaptura.getTiporecaptura_id()){
                        TipoRecaptura_id.setText(String.valueOf(obj_TipoRecaptura.getTiporecaptura_id()));
                        pos1 = i;
                    }           
            }else if(i==0){
                TipoRecaptura_id.setText(String.valueOf(obj_TipoRecaptura.getTiporecaptura_id()));
            }
        }
        combo_TipoRecaptura.setModel(new javax.swing.DefaultComboBoxModel(dados2));
        
        if(acao!=0){
            combo_TipoRecaptura.setSelectedIndex(pos1);
        }        
        /*****************************************************************/
        
        //PREECHENDO A TABELA Recaptura
        bd_Recaptura = new BD_Recaptura(kernel);
        Recaptura[] Recaptura_vetor = null;
        try {
            //VERIFICAR SE É BUSCA OU NÃO        
            Recaptura_vetor = bd_Recaptura.getRecapturas((Integer)objeto);
        } catch (SQLException ex2) {
            Logger.getLogger(CadastrarRecaptura.class.getName()).log(Level.SEVERE, null, ex2);
        }
        
        
        String dados[][] = new String[Recaptura_vetor.length][7];

        Recaptura obj_Recaptura = new Recaptura();
        for(int i=0; i < Recaptura_vetor.length; i++){
            obj_Recaptura = (Recaptura)Recaptura_vetor[i];
            dados[i][0] = String.valueOf(obj_Recaptura.getRecaptura_id());
            dados[i][1] = new SimpleDateFormat("dd/MM/yyyy").format(obj_Recaptura.getData());
            dados[i][2] = String.valueOf(obj_Recaptura.getEpoca().getNome());
            dados[i][3] = String.valueOf(obj_Recaptura.getTiporecaptura().getNome());
            dados[i][editar] = "editar";
            dados[i][excluir] = "excluir";
         
        }
      
        
        tabela_Recaptura.setModel(new javax.swing.table.DefaultTableModel(
            dados,
            new String [] {"Cod", "Data","Época","Tipo Recap.","", ""}){
            Class[] types = new Class [] {
                java.lang.String.class, 
                java.lang.String.class,
                java.lang.String.class,
                java.lang.String.class,
                java.lang.String.class,
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
      
        tabela_Recaptura.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tabela_Recaptura.getColumnModel().getColumn(0).setPreferredWidth(50);
        tabela_Recaptura.getColumnModel().getColumn(1).setPreferredWidth(100);
        tabela_Recaptura.getColumnModel().getColumn(2).setPreferredWidth(150);
        tabela_Recaptura.getColumnModel().getColumn(3).setPreferredWidth(150);
        tabela_Recaptura.getColumnModel().getColumn(editar).setPreferredWidth(30);
        tabela_Recaptura.getColumnModel().getColumn(excluir).setPreferredWidth(30);
        
        tabela_Recaptura.setDragEnabled(true);
        sp.setViewportView(tabela_Recaptura);
        //ButtonColumn buttonColumn0 = new ButtonColumn(table, 0);//VER
        ButtonColumnRecaptura buttonColumnRecaptura1 = new ButtonColumnRecaptura(tabela_Recaptura, editar);//EDITAR
        ButtonColumnRecaptura buttonColumnRecaptura2 = new ButtonColumnRecaptura(tabela_Recaptura, excluir);//EXCLUIR
    }

    //CLASSE BUTTONCOLUMN Recaptura
    class ButtonColumnRecaptura extends AbstractCellEditor
         implements TableCellRenderer, TableCellEditor, ActionListener
     {
         JTable table;
         JButton renderButton;
         JButton editButton;
         String text;

         public ButtonColumnRecaptura(JTable table, int column)
         {
             super();
             this.table = table;
             renderButton = new JButton();

             editButton = new JButton();
             
             editButton.setFocusPainted( false );
             editButton.addActionListener( this );

             TableColumnModel columnModel = table.getColumnModel();
             columnModel.getColumn(column).setCellRenderer( this );
             columnModel.getColumn(column).setCellEditor( this );
         }

         public Component getTableCellRendererComponent(
             JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
         {
             if (hasFocus)
             {
                 renderButton.setForeground(table.getForeground());
                 renderButton.setBackground(UIManager.getColor("Button.background"));
             }
             else if (isSelected)
             {
                 renderButton.setForeground(table.getSelectionForeground());
                 renderButton.setBackground(table.getSelectionBackground());
            }
             else
             {
                 renderButton.setForeground(table.getForeground());
                 renderButton.setBackground(UIManager.getColor("Button.background"));
             }

             renderButton.setBackground(new java.awt.Color(255, 255, 255));
             renderButton.setBorder(null);
             renderButton.setBorderPainted(false);
             renderButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

             text = (value == null) ? "" : value.toString();
             String imagem1 = text.equals("excluir")?"lixeira":"editar";
             renderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/"+imagem1+".png")));
             return renderButton;
         }

         public Component getTableCellEditorComponent(
             JTable table, Object value, boolean isSelected, int row, int column)
         {
             text = (value == null) ? "" : value.toString();             
             String imagem2 = text.equals("excluir")?"lixeira":"editar";
             editButton.setBackground(new java.awt.Color(255, 255, 255));
             editButton.setBorder(null);
             editButton.setBorderPainted(false);             
             editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/"+imagem2+".png")));
             editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
             //editButton.setText( text );
             return editButton;
         }

         public Object getCellEditorValue()
         {
             return text;
        }

         public void actionPerformed(ActionEvent e)
         {
             fireEditingStopped();

             switch(table.getSelectedColumn()){
                 case excluir:
                     SolicitaConfirmacaoRecaptura();
                     TabelaRecaptura();
                 break;
                 case editar:
                     int id_reg = Integer.parseInt(table.getValueAt(table.getSelectedRow(),0).toString());
                     obj_Recaptura = bd_Recaptura.getRecapturaID(id_reg);
                     
                     Recaptura_id.setText(String.valueOf(obj_Recaptura.getRecaptura_id()));
                     TipoRecaptura_id.setText(String.valueOf(obj_Recaptura.getEpoca().getEpoca_id()));
                     Epoca_id.setText(String.valueOf(obj_Recaptura.getTiporecaptura().getTiporecaptura_id()));
                     Animal_id.setText(String.valueOf(obj_Recaptura.getAnimal().getAnimal_id()));
                     

                     combo_Epoca.setSelectedItem((Object)obj_Recaptura.getEpoca().getNome().toUpperCase());
                     combo_TipoRecaptura.setSelectedItem((Object)obj_Recaptura.getTiporecaptura().getNome().toUpperCase());

                     String strdata = new SimpleDateFormat("dd/MM/yyyy").format(obj_Recaptura.getData());
                     String vet[] = strdata.split("/");

                     campo_dia.setText(vet[0]);
                     campo_mes.setText(vet[1]);
                     campo_ano.setText(vet[2]);
                     
                 break;
                 default:
                     kernel.Tela(0, kernel, 0,null,null);
                 break;
             }
             //System.out.println( "DADOS : " + table.getSelectedRow()+" "+" "+table.getSelectedColumn()+" "+table.getColumnCount()+" "+table.getValueAt(table.getSelectedRow(),0));
             
         }
     }
    private void SolicitaConfirmacaoRecaptura(){
     boolean escolha = false;

     Object[] options = {"Sim",
                    "Não"};
    int resposta = JOptionPane.showOptionDialog(this,
        "Desejas excluir o registro ?",
        "Exclusão",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE,
        null,     //do not use a custom Icon
        options,  //the titles of buttons
        options[1]);
     
     if (resposta == 0) {
       bd_Recaptura.Excluir(Integer.parseInt(tabela_Recaptura.getValueAt(tabela_Recaptura.getSelectedRow(),0).toString()));
     }
     
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Animal_id;
    private javax.swing.JLabel Epoca_id;
    private javax.swing.JLabel Recaptura_id;
    private javax.swing.JLabel TipoRecaptura_id;
    private javax.swing.JButton botao_salvar;
    private javax.swing.JButton botao_voltar;
    private javax.swing.JButton busca_gorduradestino;
    private javax.swing.JButton busca_localcoleta;
    private javax.swing.JTextField campo_ano;
    private javax.swing.JTextField campo_dia;
    private javax.swing.JTextField campo_mes;
    private javax.swing.JComboBox combo_Epoca;
    private javax.swing.JComboBox combo_TipoRecaptura;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel painel_cadastrar_area3;
    private javax.swing.JScrollPane sp;
    private javax.swing.JTable tabela_Recaptura;
    // End of variables declaration//GEN-END:variables

}
