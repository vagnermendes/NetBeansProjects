/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CadastrarAnimal.java
 *
 * Created on 14/02/2011, 18:44:34
 */

package telas;

import banco.BD_Animal;
import banco.BD_Especie;
import banco.BD_Status;
import banco.BD_Sexo;
import banco.BD_Idade;
import banco.BD_Area;
import banco.BD_Anestesia;
import banco.BD_Sangue;
import banco.BD_Carrapato;
import banco.BD_Gordura;
import banco.BD_Recaptura;
import banco.BD_AnimalTag;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import objetos.Kernel;
import objetos.Animal;
import objetos.Especie;
import objetos.Status;
import objetos.Area;
import objetos.Sexo;
import objetos.AnimalTag;

/**
 *
 * @author vagner
 */
public class CadastrarAnimal extends javax.swing.JPanel {

    private Kernel          kernel;         
    private Animal          obj_Animal;
    private Especie         obj_Especie;
    private Status          obj_Status;
    private Area            obj_Area;
    private AnimalTag       obj_AnimalTag;
    private Sexo            obj_Sexo;    
    private BD_Animal       bd_Animal;
    private BD_Carrapato    bd_Carrapato;        
    private BD_Especie      bd_Especie;    
    private BD_Gordura      bd_Gordura;    
    private BD_Status       bd_Status;    
    private BD_Area         bd_Area;
    private BD_Sangue       bd_Sangue;
    private BD_Recaptura    bd_Recaptura;
    private BD_Anestesia    bd_Anestesia;
    private BD_Sexo         bd_Sexo;    
    private BD_Idade        bd_Idade;           
    private BD_AnimalTag    bd_AnimalTag;    
    private int             acao;
    private Object          objeto;
    private final int editar  = 7;
    private final int excluir = 8;
    
    /** Creates new form CadastrarAnimais */
    public CadastrarAnimal(Kernel obj,int acao,Object texto) {
        kernel      = obj;
        this.acao   = acao;
        this.objeto = texto;
        
        if(bd_Animal==null){        bd_Animal       = new BD_Animal(kernel);}
        if(bd_Carrapato==null){     bd_Carrapato    = new BD_Carrapato(kernel);}
        if(bd_Especie==null){       bd_Especie      = new BD_Especie(kernel);}
        if(bd_Gordura==null){       bd_Gordura      = new BD_Gordura(kernel);}
        if(bd_Status==null){        bd_Status       = new BD_Status(kernel);}
        if(bd_Area==null){          bd_Area         = new BD_Area(kernel);}
        if(bd_Sangue==null){        bd_Sangue       = new BD_Sangue(kernel);}
        if(bd_Recaptura==null){     bd_Recaptura    = new BD_Recaptura(kernel);}
        if(bd_Anestesia==null){     bd_Anestesia    = new BD_Anestesia(kernel);}
        if(bd_Sexo==null){          bd_Sexo         = new BD_Sexo(kernel);}
        if(bd_Idade==null){         bd_Idade        = new BD_Idade(kernel);}
        if(bd_AnimalTag==null){     bd_AnimalTag    = new BD_AnimalTag(kernel);}
        
        initComponents();                        
        TabelaAnimal();  
        if(objeto!=null){
            PreencherFormulario(Integer.parseInt(objeto.toString()));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupo_pele = new javax.swing.ButtonGroup();
        grupo_bigode = new javax.swing.ButtonGroup();
        grupo_instrumentos = new javax.swing.ButtonGroup();
        grupo_dente = new javax.swing.ButtonGroup();
        painel_cadastrar_area3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        combo_Especie = new javax.swing.JComboBox();
        busca_especies = new javax.swing.JButton();
        busca_status = new javax.swing.JButton();
        combo_Status = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        busca_status2 = new javax.swing.JButton();
        combo_Area = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        busca_status3 = new javax.swing.JButton();
        combo_Sexo = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        campo_ano = new javax.swing.JTextField();
        campo_mes = new javax.swing.JTextField();
        campo_dia = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        campo_minuto = new javax.swing.JTextField();
        campo_hora = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        campo_pesototal = new javax.swing.JTextField();
        campo_rede = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        campo_massa = new javax.swing.JTextField();
        calcular_massa = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        campo_comprimento = new javax.swing.JTextField();
        campo_circunferencia = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        campo_pesoestimado = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        campo_condicao = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        campo_repr = new javax.swing.JTextField();
        Animal_id = new javax.swing.JLabel();
        Especie_id = new javax.swing.JLabel();
        Status_id = new javax.swing.JLabel();
        Area_id = new javax.swing.JLabel();
        Sexo_id = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        pele_sim = new javax.swing.JRadioButton();
        pele_nao = new javax.swing.JRadioButton();
        bigode_nao = new javax.swing.JRadioButton();
        bigode_sim = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        instrumentos_sim = new javax.swing.JRadioButton();
        instrumentos_nao = new javax.swing.JRadioButton();
        jLabel17 = new javax.swing.JLabel();
        dente_sim = new javax.swing.JRadioButton();
        dente_nao = new javax.swing.JRadioButton();
        cadastro = new javax.swing.JLabel();
        sp = new javax.swing.JScrollPane();
        tabela_Animal = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        botao_sangue = new javax.swing.JButton();
        botao_anestesia = new javax.swing.JButton();
        botao_carrapato = new javax.swing.JButton();
        botao_gordura = new javax.swing.JButton();
        botao_recaptura = new javax.swing.JButton();
        botao_tag = new javax.swing.JButton();
        botao_idade = new javax.swing.JButton();
        painel_cadastrar_area4 = new javax.swing.JPanel();
        voltar = new javax.swing.JButton();
        botao_salvar = new javax.swing.JButton();
        botao_novo = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 204));
        setPreferredSize(new java.awt.Dimension(900, 549));

        painel_cadastrar_area3.setBackground(new java.awt.Color(204, 204, 204));
        painel_cadastrar_area3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Formulário Simples"));

        jLabel1.setText("Espécies:");

        combo_Especie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_Especie.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_EspecieItemStateChanged(evt);
            }
        });

        busca_especies.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/question.gif"))); // NOI18N
        busca_especies.setToolTipText("Caso não tenha a temporada, cadastre aqui.");
        busca_especies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busca_especiesActionPerformed(evt);
            }
        });

        busca_status.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/question.gif"))); // NOI18N
        busca_status.setToolTipText("Caso não tenha a temporada, cadastre aqui.");
        busca_status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busca_statusActionPerformed(evt);
            }
        });

        combo_Status.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_Status.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_StatusItemStateChanged(evt);
            }
        });

        jLabel3.setText("Status:");

        busca_status2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/question.gif"))); // NOI18N
        busca_status2.setToolTipText("Caso não tenha a temporada, cadastre aqui.");
        busca_status2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busca_status2ActionPerformed(evt);
            }
        });

        combo_Area.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_AreaItemStateChanged(evt);
            }
        });

        jLabel5.setText("Area:");

        busca_status3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/question.gif"))); // NOI18N
        busca_status3.setToolTipText("Caso não tenha a temporada, cadastre aqui.");
        busca_status3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busca_status3ActionPerformed(evt);
            }
        });

        combo_Sexo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_Sexo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_SexoItemStateChanged(evt);
            }
        });

        jLabel6.setText("Sexo:");

        campo_ano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campo_anoActionPerformed(evt);
            }
        });

        jLabel7.setText("Data:");

        jLabel8.setText("Hora:");

        jLabel10.setText("Peso total(g):");

        jLabel11.setText("Peso rede(g):");

        jLabel12.setText("Massa(g):");

        calcular_massa.setText("Calcular Massa");
        calcular_massa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcular_massaActionPerformed(evt);
            }
        });

        jLabel13.setText("Comprimento(cm):");

        jLabel16.setText("Circunferencia(cm):");

        jLabel18.setText("Peso Estimado(g):");

        jLabel20.setText("Condição:");

        jLabel14.setText("REPR:");

        Animal_id.setForeground(new java.awt.Color(204, 204, 204));
        Animal_id.setText("0");

        Especie_id.setForeground(new java.awt.Color(204, 204, 204));
        Especie_id.setText("0");

        Status_id.setForeground(new java.awt.Color(204, 204, 204));
        Status_id.setText("0");

        Area_id.setForeground(new java.awt.Color(204, 204, 204));
        Area_id.setText("0");

        Sexo_id.setForeground(new java.awt.Color(204, 204, 204));
        Sexo_id.setText("0");

        jLabel9.setText("Pele:");

        grupo_pele.add(pele_sim);
        pele_sim.setText("Sim");

        grupo_pele.add(pele_nao);
        pele_nao.setText("Não");

        grupo_bigode.add(bigode_nao);
        bigode_nao.setText("Não");

        grupo_bigode.add(bigode_sim);
        bigode_sim.setText("Sim");

        jLabel15.setText("Bigode:");

        jLabel2.setText("Instrumentos:");

        grupo_instrumentos.add(instrumentos_sim);
        instrumentos_sim.setText("Sim");

        grupo_instrumentos.add(instrumentos_nao);
        instrumentos_nao.setText("Não");

        jLabel17.setText("Dente:");

        grupo_dente.add(dente_sim);
        dente_sim.setText("Sim");

        grupo_dente.add(dente_nao);
        dente_nao.setText("Não");

        cadastro.setForeground(new java.awt.Color(204, 0, 0));
        cadastro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        org.jdesktop.layout.GroupLayout painel_cadastrar_area3Layout = new org.jdesktop.layout.GroupLayout(painel_cadastrar_area3);
        painel_cadastrar_area3.setLayout(painel_cadastrar_area3Layout);
        painel_cadastrar_area3Layout.setHorizontalGroup(
            painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cadastro, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel2)
                                    .add(jLabel9)
                                    .add(jLabel13)
                                    .add(jLabel10)
                                    .add(jLabel7)
                                    .add(jLabel20))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                                    .add(campo_condicao)
                                                    .add(campo_comprimento)
                                                    .add(campo_pesototal, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                                                .add(36, 36, 36)
                                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel11)
                                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel18)
                                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel16))
                                                .add(6, 6, 6))
                                            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                                        .add(instrumentos_sim)
                                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                        .add(instrumentos_nao))
                                                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                                        .add(pele_sim)
                                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                        .add(pele_nao)))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                    .add(jLabel15)
                                                    .add(jLabel17))
                                                .add(10, 10, 10)))
                                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                                    .add(org.jdesktop.layout.GroupLayout.LEADING, bigode_sim, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .add(org.jdesktop.layout.GroupLayout.LEADING, dente_sim, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                    .add(dente_nao)
                                                    .add(bigode_nao)))
                                            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                                    .add(org.jdesktop.layout.GroupLayout.LEADING, campo_pesoestimado)
                                                    .add(org.jdesktop.layout.GroupLayout.LEADING, campo_circunferencia)
                                                    .add(org.jdesktop.layout.GroupLayout.LEADING, campo_rede, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                    .add(jLabel12)
                                                    .add(jLabel14))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, campo_repr, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, campo_massa))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(calcular_massa, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                        .add(campo_dia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                                .add(165, 165, 165)
                                                .add(jLabel8)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(campo_hora, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .add(1, 1, 1)
                                                .add(campo_minuto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                                .add(1, 1, 1)
                                                .add(campo_mes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .add(2, 2, 2)
                                                .add(campo_ano, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                .add(41, 41, 41)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel6)
                                    .add(jLabel1))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(combo_Especie, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(combo_Sexo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(busca_especies, 0, 0, Short.MAX_VALUE)
                                    .add(busca_status3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(62, 62, 62)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                        .add(7, 7, 7)
                                        .add(jLabel5)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(combo_Area, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                        .add(jLabel3)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(combo_Status, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                        .add(12, 12, 12)
                                        .add(busca_status2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                        .add(10, 10, 10)
                                        .add(busca_status, 0, 0, Short.MAX_VALUE)))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Animal_id)
                        .add(5, 5, 5)
                        .add(Especie_id)
                        .add(5, 5, 5)
                        .add(Status_id)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Area_id)
                        .add(18, 18, 18)
                        .add(Sexo_id, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(70, 70, 70)))
                .addContainerGap())
        );
        painel_cadastrar_area3Layout.setVerticalGroup(
            painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                .add(cadastro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel3)
                                    .add(combo_Status, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, painel_cadastrar_area3Layout.createSequentialGroup()
                                    .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(combo_Especie, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(jLabel1))
                                    .add(1, 1, 1)))
                            .add(busca_especies)
                            .add(busca_status))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jLabel5)
                                .add(combo_Area, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jLabel6)
                                .add(combo_Sexo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(busca_status2)
                            .add(busca_status3))
                        .add(4, 4, 4)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel7)
                            .add(campo_hora, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(campo_minuto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(campo_mes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(campo_ano, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel8)
                            .add(campo_dia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel10)
                                    .add(campo_pesototal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel13)
                                    .add(campo_comprimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel20)
                                    .add(campo_condicao, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(campo_rede, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel12)
                                    .add(campo_massa, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel11)
                                    .add(calcular_massa))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel16)
                                    .add(campo_circunferencia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(campo_repr, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel14))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel18)
                                    .add(campo_pesoestimado, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jLabel9)
                                .add(pele_sim)
                                .add(pele_nao))
                            .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(bigode_sim)
                                .add(jLabel15)
                                .add(bigode_nao)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jLabel2)
                                .add(instrumentos_sim)
                                .add(instrumentos_nao))
                            .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jLabel17)
                                .add(dente_sim)
                                .add(dente_nao))))
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(82, 82, 82)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Animal_id)
                            .add(Especie_id)
                            .add(Status_id)
                            .add(Area_id)
                            .add(Sexo_id))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabela_Animal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Cod", "Tag", "Sexo", "Area", "Espécie", "Idade", "Status", "Editar", "Excluir"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela_Animal.setDragEnabled(true);
        tabela_Animal.setRowHeight(25);
        tabela_Animal.getTableHeader().setReorderingAllowed(false);
        sp.setViewportView(tabela_Animal);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Complementos"));

        botao_sangue.setText("Sangue");
        botao_sangue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_sangueActionPerformed(evt);
            }
        });

        botao_anestesia.setText("Anestesia");
        botao_anestesia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_anestesiaActionPerformed(evt);
            }
        });

        botao_carrapato.setText("Carrapato");
        botao_carrapato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_carrapatoActionPerformed(evt);
            }
        });

        botao_gordura.setText("Gordura");
        botao_gordura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_gorduraActionPerformed(evt);
            }
        });

        botao_recaptura.setText("Recaptura");
        botao_recaptura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_recapturaActionPerformed(evt);
            }
        });

        botao_tag.setText("Tag");
        botao_tag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_tagActionPerformed(evt);
            }
        });

        botao_idade.setText("Idade");
        botao_idade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_idadeActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(botao_anestesia, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .add(botao_carrapato, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .add(botao_gordura, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .add(botao_idade, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .add(botao_recaptura, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(botao_sangue, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .add(botao_tag, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(botao_anestesia)
                .add(4, 4, 4)
                .add(botao_carrapato)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(botao_gordura)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(botao_idade)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(botao_recaptura)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(botao_sangue)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(botao_tag)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painel_cadastrar_area4.setBackground(new java.awt.Color(204, 204, 204));
        painel_cadastrar_area4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        voltar.setBackground(new java.awt.Color(204, 204, 204));
        voltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/back.png"))); // NOI18N
        voltar.setToolTipText("Voltar");
        voltar.setBorder(null);
        voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarActionPerformed(evt);
            }
        });

        botao_salvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/salvar.png"))); // NOI18N
        botao_salvar.setToolTipText("Salvar registro");
        botao_salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_salvarActionPerformed(evt);
            }
        });

        botao_novo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/novo.png"))); // NOI18N
        botao_novo.setToolTipText("Novo registro");
        botao_novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_novoActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout painel_cadastrar_area4Layout = new org.jdesktop.layout.GroupLayout(painel_cadastrar_area4);
        painel_cadastrar_area4.setLayout(painel_cadastrar_area4Layout);
        painel_cadastrar_area4Layout.setHorizontalGroup(
            painel_cadastrar_area4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area4Layout.createSequentialGroup()
                .add(botao_salvar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(botao_novo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(voltar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painel_cadastrar_area4Layout.setVerticalGroup(
            painel_cadastrar_area4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(voltar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(botao_novo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(botao_salvar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(sp)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(painel_cadastrar_area3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 643, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, painel_cadastrar_area4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(painel_cadastrar_area4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(painel_cadastrar_area3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void combo_EspecieItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_EspecieItemStateChanged
        // TODO add your handling code here:
        Especie_id.setText(String.valueOf(bd_Especie.getEspecieIDNome((String)combo_Especie.getSelectedItem())));
    }//GEN-LAST:event_combo_EspecieItemStateChanged

    private void busca_especiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busca_especiesActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_busca_especiesActionPerformed

    private void busca_statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busca_statusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_busca_statusActionPerformed

    private void combo_StatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_StatusItemStateChanged
        // TODO add your handling code here:
        Status_id.setText(String.valueOf(bd_Status.getStatusIDNome((String)combo_Status.getSelectedItem())));
    }//GEN-LAST:event_combo_StatusItemStateChanged

    private void busca_status2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busca_status2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_busca_status2ActionPerformed

    private void combo_AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_AreaItemStateChanged
        try {
            // TODO add your handling code here:
            Area_id.setText(String.valueOf(bd_Area.getAreaIDNome((String)combo_Area.getSelectedItem())));
        } catch (SQLException ex) {
            Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_combo_AreaItemStateChanged

    private void busca_status3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busca_status3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_busca_status3ActionPerformed

    private void combo_SexoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_SexoItemStateChanged
        // TODO add your handling code here:
         Sexo_id.setText(String.valueOf(bd_Sexo.getSexoIDNome((String)combo_Sexo.getSelectedItem())));
    }//GEN-LAST:event_combo_SexoItemStateChanged

    private void campo_anoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campo_anoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campo_anoActionPerformed

    private void botao_salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_salvarActionPerformed
        // TODO add your handling code here:
        SalvarAnimal();
        HabilitarBotoes(); 
}//GEN-LAST:event_botao_salvarActionPerformed

    private void botao_novoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_novoActionPerformed
        // TODO add your handling code here:
        LimparFormulario();
        DesabilitarBotoes();
    }//GEN-LAST:event_botao_novoActionPerformed

    private void calcular_massaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcular_massaActionPerformed
        // TODO add your handling code here:
        campo_massa.setText(String.valueOf((Double.parseDouble(campo_pesototal.getText()))-(Double.parseDouble(campo_rede.getText()))));
    }//GEN-LAST:event_calcular_massaActionPerformed

    private void botao_idadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_idadeActionPerformed
        // TODO add your handling code here:
        kernel.Tela(12,null,0,Animal_id.getText(),null);
}//GEN-LAST:event_botao_idadeActionPerformed

    private void botao_tagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_tagActionPerformed
        // TODO add your handling code here:
        kernel.Tela(22,null,0,Animal_id.getText(),null);
}//GEN-LAST:event_botao_tagActionPerformed

    private void botao_gorduraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_gorduraActionPerformed
        // TODO add your handling code here:
        kernel.Tela(17,null,0,Integer.parseInt(Animal_id.getText()),null);
}//GEN-LAST:event_botao_gorduraActionPerformed

    private void botao_carrapatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_carrapatoActionPerformed
        // TODO add your handling code here:
        objeto = Animal_id.getText();
        kernel.Tela(24,null,0,objeto,null);
}//GEN-LAST:event_botao_carrapatoActionPerformed

    private void botao_anestesiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_anestesiaActionPerformed
        // TODO add your handling code here:
        objeto = Integer.parseInt(Animal_id.getText());
        kernel.Tela(16,null,0,objeto,null);
}//GEN-LAST:event_botao_anestesiaActionPerformed

    private void botao_sangueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_sangueActionPerformed
        // TODO add your handling code here:
        kernel.Tela(23,null,0,Animal_id.getText(),null);
}//GEN-LAST:event_botao_sangueActionPerformed

    private void botao_recapturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_recapturaActionPerformed
        // TODO add your handling code here:
        kernel.Tela(25,null,0,Integer.parseInt(Animal_id.getText()),null);
    }//GEN-LAST:event_botao_recapturaActionPerformed

    private void voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarActionPerformed
        // TODO add your handling code here:
        kernel.Tela(42, kernel, 0, null, null);
    }//GEN-LAST:event_voltarActionPerformed

    //LIMPANDO FORMULARIO
    private void LimparFormulario(){         
         
         Animal_id.setText("0");
         cadastro.setText("");
         
         //DADOS DO ANIMAL
         campo_pesototal.setText("");
         campo_rede.setText("");
         campo_massa.setText("");
         campo_comprimento.setText("");
         campo_circunferencia.setText("");
         campo_repr.setText("");
         campo_condicao.setText("");
         campo_pesoestimado.setText("");
         
         //DATA          
         campo_dia.setText("");
         campo_mes.setText("");
         campo_ano.setText("");
         
         //HORA         
         campo_hora.setText("");
         campo_minuto.setText("");
         
         /****************************************************/
        /********** SETANDO OS RADIOS *****************/
        pele_nao.setSelected(true); 
        bigode_nao.setSelected(true);
        instrumentos_nao.setSelected(true);
        dente_nao.setSelected(true);
        /**********************************************/
        /********* PREENCHENDO O VETOR Especie *************/        
        
        Especie[] Especie_vetor = null;
        try {
                Especie_vetor = bd_Especie.getEspecies();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados1[] = new String[Especie_vetor.length];

        obj_Especie = new Especie();
        int pos = 0;
        for(int i=0; i < Especie_vetor.length; i++){
            obj_Especie = (Especie)Especie_vetor[i];
            dados1[i] = String.valueOf(obj_Especie.getNome()).toUpperCase();
            if(acao!=0){                
                    if(acao==obj_Especie.getEspecie_id()){
                        Especie_id.setText(String.valueOf(obj_Especie.getEspecie_id()));                                
                        pos = i;
                    }           
            }else if(i==0){
                Especie_id.setText(String.valueOf(obj_Especie.getEspecie_id()));
            }
        }
        combo_Especie.setModel(new javax.swing.DefaultComboBoxModel(dados1));        
        
        if(acao!=0){
            combo_Especie.setSelectedIndex(pos);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Status *************/                
        Status[] Status_vetor = null;
        try {
                Status_vetor = bd_Status.getStatuss();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados2[] = new String[Status_vetor.length];

        obj_Status = new Status();
        int pos2 = 0;
        for(int i=0; i < Status_vetor.length; i++){
            obj_Status = (Status)Status_vetor[i];
            dados2[i] = String.valueOf(obj_Status.getNome()).toUpperCase();
            if(acao!=0){                
                    if(acao==obj_Status.getStatus_id()){
                        Status_id.setText(String.valueOf(obj_Status.getStatus_id()));                                
                        pos2 = i;
                    }           
            }else if(i==0){
                Status_id.setText(String.valueOf(obj_Status.getStatus_id()));
            }
        }
        combo_Status.setModel(new javax.swing.DefaultComboBoxModel(dados2));        
        
        if(acao!=0){
            combo_Status.setSelectedIndex(pos2);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Area *************/                
        Area[] Area_vetor = null;
        try {
                Area_vetor = bd_Area.getAreas();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados3[] = new String[Area_vetor.length];

        obj_Area = new Area();
        int pos3 = 0;
        for(int i=0; i < Area_vetor.length; i++){
            obj_Area = (Area)Area_vetor[i];
            dados3[i] = String.valueOf(obj_Area.getNome()).toUpperCase();
            if(acao!=0){                
                    if(acao==obj_Area.getArea_id()){
                        Area_id.setText(String.valueOf(obj_Area.getArea_id()));                                
                        pos3 = i;
                    }           
            }else if(i==0){
                Area_id.setText(String.valueOf(obj_Area.getArea_id()));
            }
        }
        combo_Area.setModel(new javax.swing.DefaultComboBoxModel(dados3));        
        
        if(acao!=0){
            combo_Area.setSelectedIndex(pos3);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Sexo *************/   
        Sexo[] Sexo_vetor = null;
        try {
                Sexo_vetor = bd_Sexo.getSexos();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados4[] = new String[Sexo_vetor.length];

        obj_Sexo = new Sexo();
        int pos4 = 0;
        for(int i=0; i < Sexo_vetor.length; i++){
            obj_Sexo = (Sexo)Sexo_vetor[i];
            dados4[i] = String.valueOf(obj_Sexo.getNome()).toUpperCase();
            if(acao!=0){                
                    if(acao==obj_Sexo.getSexo_id()){
                        Sexo_id.setText(String.valueOf(obj_Sexo.getSexo_id()));                                
                        pos4 = i;
                    }           
            }else if(i==0){
                Sexo_id.setText(String.valueOf(obj_Sexo.getSexo_id()));
            }
        }
        combo_Sexo.setModel(new javax.swing.DefaultComboBoxModel(dados4));        
        
        if(acao!=0){
            combo_Sexo.setSelectedIndex(pos4);
        }       
        /*****************************************************************/
        
    
    }
    
    //DESABILITANDO OS BOTOES
    private void DesabilitarBotoes(){
    /********** HABILITANDO OS BOTOES *****************/
        botao_anestesia.setEnabled(false);
        botao_carrapato.setEnabled(false);
        botao_gordura.setEnabled(false);
        botao_idade.setEnabled(false);
        botao_recaptura.setEnabled(false);
        botao_sangue.setEnabled(false);
        botao_tag.setEnabled(false);
        botao_novo.setEnabled(false);
        botao_salvar.setEnabled(true);
        /****************************************************/
    }
    //HABILITAR OS BOTOES
    private void HabilitarBotoes(){
        /********** HABILITANDO OS BOTOES *****************/
        botao_anestesia.setEnabled(true);
        botao_carrapato.setEnabled(true);
        botao_gordura.setEnabled(true);
        botao_idade.setEnabled(true);
        botao_recaptura.setEnabled(true);
        botao_sangue.setEnabled(true);
        botao_tag.setEnabled(true);
        botao_novo.setEnabled(true);
        botao_salvar.setEnabled(false);
        /****************************************************/
    }
    
    
    //SALVAR Animal
    private void SalvarAnimal(){
        
        obj_Animal  = new Animal();
        obj_Especie = new Especie();
        
        
        SimpleDateFormat horaFormat = new SimpleDateFormat("HH:mm");          
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");  
        
        if(Animal_id.getText().equals("0")){           
            
            //SETANDO DADOS DO ANIMAL   
            obj_Animal.setCircunferencia(Double.parseDouble((campo_circunferencia.getText().equals("")?"0":campo_circunferencia.getText()))); 
            obj_Animal.setMassa(Double.parseDouble((campo_massa.getText().equals("")?"0":campo_massa.getText()))); 
            obj_Animal.setCondicao(Double.parseDouble((campo_condicao.getText().equals("")?"0":campo_condicao.getText()))); 
            obj_Animal.setPeso_estimado(Double.parseDouble((campo_pesoestimado.getText().equals("")?"0":campo_pesoestimado.getText()))); 
            obj_Animal.setComprimento(Double.parseDouble((campo_comprimento.getText().equals("")?"0":campo_comprimento.getText()))); 
            obj_Animal.setPeso_rede(Double.parseDouble((campo_rede.getText().equals("")?"0":campo_rede.getText()))); 
            obj_Animal.setPeso_total(Double.parseDouble((campo_pesototal.getText().equals("")?"0":campo_pesototal.getText()))); 
            obj_Animal.setRepr(Double.parseDouble((campo_repr.getText().equals("")?"0":campo_repr.getText()))); 
            obj_Animal.setPele(pele_sim.isSelected()); 
            //obj_Animal.setBigode(bigode_sim.isSelected()); 
            obj_Animal.setDente(dente_sim.isSelected()); 
            obj_Animal.setInstrumento(instrumentos_sim.isSelected()); 
            //CAMPO HORAS
            String sHora = ((campo_hora.getText().equals(""))?"00":campo_hora.getText())+":"+((campo_minuto.getText().equals(""))?"00":campo_minuto.getText());
            try {
                obj_Animal.setHora(horaFormat.parse(sHora));
            } catch (ParseException ex) {
                Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //CAMPO DATA
            String sDate = ((campo_ano.getText().equals(""))?"0000":campo_ano.getText())+"-"+((campo_mes.getText().equals(""))?"00":campo_mes.getText())+"-"+((campo_dia.getText().equals(""))?"00":campo_dia.getText());
            try {
                obj_Animal.setData(dateFormat.parse(sDate));
            } catch (ParseException ex) {
                Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //SETANDO ESPECIE
            obj_Especie.setEspecie_id(Integer.parseInt(Especie_id.getText()));            
            obj_Animal.setEspecie(obj_Especie);
            
            //SETANDO STATUS
            obj_Status.setStatus_id(Integer.parseInt(Status_id.getText()));            
            obj_Animal.setStatus(obj_Status);
            
            //SETANDO SEXO
            obj_Sexo.setSexo_id(Integer.parseInt(Sexo_id.getText()));            
            obj_Animal.setSexo(obj_Sexo);
            
            //SETANDO AREA
            obj_Area.setArea_id(Integer.parseInt(Area_id.getText()));            
            obj_Animal.setArea(obj_Area);
            
            Animal_id.setText(String.valueOf(bd_Animal.SalvarGetID(obj_Animal)));
            
            
        }else{            
            //SETANDO DADOS DO ANIMAL
            obj_Animal.setAnimal_id(Integer.parseInt(Animal_id.getText()));
            
            obj_Animal.setCircunferencia(Double.parseDouble(campo_circunferencia.getText())); 
            obj_Animal.setMassa(Double.parseDouble(campo_massa.getText())); 
            obj_Animal.setCondicao(Double.parseDouble(campo_condicao.getText())); 
            obj_Animal.setPeso_estimado(Double.parseDouble(campo_pesoestimado.getText())); 
            obj_Animal.setPeso_rede(Double.parseDouble(campo_rede.getText())); 
            obj_Animal.setPeso_total(Double.parseDouble(campo_pesototal.getText()));
            obj_Animal.setComprimento(Double.parseDouble((campo_comprimento.getText().equals("0")?"0":campo_comprimento.getText()))); 
            obj_Animal.setRepr(Double.parseDouble(campo_repr.getText()));            
            obj_Animal.setPele(pele_sim.isSelected()); 
          //  obj_Animal.setBigode(bigode_sim.isSelected()); 
            obj_Animal.setDente(dente_sim.isSelected()); 
            obj_Animal.setInstrumento(instrumentos_sim.isSelected()); 
            
            //CAMPO HORAS
            String sHora = ((campo_hora.getText().equals(""))?"00":campo_hora.getText())+":"+((campo_minuto.getText().equals(""))?"00":campo_minuto.getText());
            try {
                obj_Animal.setHora(horaFormat.parse(sHora));
            } catch (ParseException ex) {
                Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //CAMPO DATA
            String sDate = ((campo_ano.getText().equals(""))?"0000":campo_ano.getText())+"-"+((campo_mes.getText().equals(""))?"00":campo_mes.getText())+"-"+((campo_dia.getText().equals(""))?"00":campo_dia.getText());
            try {
                obj_Animal.setData(dateFormat.parse(sDate));
            } catch (ParseException ex) {
                Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //SETANDO ESPECIE
            obj_Especie.setEspecie_id(Integer.parseInt(Especie_id.getText()));            
            obj_Animal.setEspecie(obj_Especie);
            
            //SETANDO STATUS
            obj_Status.setStatus_id(Integer.parseInt(Status_id.getText()));            
            obj_Animal.setStatus(obj_Status);
            
            //SETANDO SEXO
            obj_Sexo.setSexo_id(Integer.parseInt(Sexo_id.getText()));            
            obj_Animal.setSexo(obj_Sexo);
            
            //SETANDO AREA
            obj_Area.setArea_id(Integer.parseInt(Area_id.getText()));            
            obj_Animal.setArea(obj_Area);
            
            //SALVANDO OBJETO
            bd_Animal.Atualizar(obj_Animal);
            
        }
         cadastro.setText("Cadastro realizado com sucesso");              
         this.TabelaAnimal();  
         VerificarComplementos();
    }
    
    //TABELA Animal
    public void TabelaAnimal(){
        
        if(acao==1){
            ///System.out.println((String)objeto);
            String vet[] = ((String)objeto).split("-");
            String aniVet[] = vet[0].split(":");
            String objVet[] = vet[1].split(":");
            
            PreencherFormulario(Integer.parseInt(aniVet[1]));
        }else if(acao==2){
            PreencherFormulario(Integer.parseInt((String)objeto));
        }
        
        /********** DESABILITANDO OS BOTOES *****************/
        DesabilitarBotoes();
        /****************************************************/        
        /********* PREENCHENDO O VETOR Especie *************/        
        Especie[] Especie_vetor = null;
        try {
                Especie_vetor = bd_Especie.getEspecies();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados1[] = new String[Especie_vetor.length];

        obj_Especie = new Especie();
        int pos = 0;
        for(int i=0; i < Especie_vetor.length; i++){
            obj_Especie = (Especie)Especie_vetor[i];
            dados1[i] = String.valueOf(obj_Especie.getNome()).toUpperCase();
            if(acao!=0){                
                    if(acao==obj_Especie.getEspecie_id()){
                        Especie_id.setText(String.valueOf(obj_Especie.getEspecie_id()));                                
                        pos = i;
                    }           
            }else if(i==0){
                Especie_id.setText(String.valueOf(obj_Especie.getEspecie_id()));
            }
        }
        combo_Especie.setModel(new javax.swing.DefaultComboBoxModel(dados1));        
        
        if(acao!=0){
            combo_Especie.setSelectedIndex(pos);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Status *************/        
        Status[] Status_vetor = null;
        try {
                Status_vetor = bd_Status.getStatuss();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados2[] = new String[Status_vetor.length];

        obj_Status = new Status();
        int pos2 = 0;
        for(int i=0; i < Status_vetor.length; i++){
            obj_Status = (Status)Status_vetor[i];
            dados2[i] = String.valueOf(obj_Status.getNome()).toUpperCase();
            if(acao!=0){                
                    if(acao==obj_Status.getStatus_id()){
                        Status_id.setText(String.valueOf(obj_Status.getStatus_id()));                                
                        pos2 = i;
                    }           
            }else if(i==0){
                Status_id.setText(String.valueOf(obj_Status.getStatus_id()));
            }
        }
        combo_Status.setModel(new javax.swing.DefaultComboBoxModel(dados2));        
        
        if(acao!=0){
            combo_Status.setSelectedIndex(pos2);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Area *************/        
        Area[] Area_vetor = null;
        try {
                Area_vetor = bd_Area.getAreas();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados3[] = new String[Area_vetor.length];

        obj_Area = new Area();
        int pos3 = 0;
        for(int i=0; i < Area_vetor.length; i++){
            obj_Area = (Area)Area_vetor[i];
            dados3[i] = String.valueOf(obj_Area.getNome()).toUpperCase();
            if(acao!=0){                
                    if(acao==obj_Area.getArea_id()){
                        Area_id.setText(String.valueOf(obj_Area.getArea_id()));                                
                        pos3 = i;
                    }           
            }else if(i==0){
                Area_id.setText(String.valueOf(obj_Area.getArea_id()));
            }
        }
        combo_Area.setModel(new javax.swing.DefaultComboBoxModel(dados3));        
        
        if(acao!=0){
            combo_Area.setSelectedIndex(pos3);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Sexo *************/   
        Sexo[] Sexo_vetor = null;
        try {
                Sexo_vetor = bd_Sexo.getSexos();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados4[] = new String[Sexo_vetor.length];

        obj_Sexo = new Sexo();
        int pos4 = 0;
        for(int i=0; i < Sexo_vetor.length; i++){
            obj_Sexo = (Sexo)Sexo_vetor[i];
            dados4[i] = String.valueOf(obj_Sexo.getNome()).toUpperCase();
            if(acao!=0){                
                    if(acao==obj_Sexo.getSexo_id()){
                        Sexo_id.setText(String.valueOf(obj_Sexo.getSexo_id()));                                
                        pos4 = i;
                    }           
            }else if(i==0){
                Sexo_id.setText(String.valueOf(obj_Sexo.getSexo_id()));
            }
        }
        combo_Sexo.setModel(new javax.swing.DefaultComboBoxModel(dados4));        
        
        if(acao!=0){
            combo_Sexo.setSelectedIndex(pos4);
        }       
        /*****************************************************************/
        
        //PREECHENDO A TABELA Animal                
        Animal[] Animal_vetor = null;
        try {
            //VERIFICAR SE É BUSCA OU NÃO        
            Animal_vetor = bd_Animal.getAnimals();
        } catch (SQLException ex2) {
            Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, ex2);
        }
        
        String dados[][] = new String[Animal_vetor.length][9];
        obj_Animal = new Animal();
        for(int i=0; i < Animal_vetor.length; i++){
            obj_Animal = (Animal)Animal_vetor[i];
            dados[i][0] = String.valueOf(obj_Animal.getAnimal_id());
            dados[i][1] = obj_Animal.getTags();
            dados[i][2] = String.valueOf(obj_Animal.getEspecie().getNome());
            dados[i][3] = String.valueOf(obj_Animal.getStatus().getNome());            
            dados[i][4] = ((obj_Animal.getArea()!=null)?String.valueOf(obj_Animal.getArea().getNome()):"");
            dados[i][5] = String.valueOf(obj_Animal.getSexo().getNome());
            dados[i][6] = String.valueOf(((obj_Animal.getIdade()==null)?"-":obj_Animal.getIdade().getIdade()));
            dados[i][editar]    = "editar";
            if(kernel.getUsuario().getNivel()==0){                    
                dados[i][excluir]   = "excluir";
            }
         
        }
      
        
        tabela_Animal.setModel(new javax.swing.table.DefaultTableModel(
            dados,
            new String [] {"Cod", "Tag","Espécie","Status","Area","Sexo","Idade","", ""}){
            Class[] types = new Class [] {
                java.lang.String.class, 
                java.lang.String.class,
                java.lang.String.class, 
                java.lang.String.class,
                java.lang.String.class, 
                java.lang.String.class,
                java.lang.String.class,
                java.lang.String.class,
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
      
        tabela_Animal.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tabela_Animal.getColumnModel().getColumn(0).setPreferredWidth(50);  //COD
        tabela_Animal.getColumnModel().getColumn(1).setPreferredWidth(150); //TAG       
        tabela_Animal.getColumnModel().getColumn(2).setPreferredWidth(150); //ESPECIE
        tabela_Animal.getColumnModel().getColumn(3).setPreferredWidth(150); //STATUS
        tabela_Animal.getColumnModel().getColumn(5).setPreferredWidth(100); //AREA
        tabela_Animal.getColumnModel().getColumn(6).setPreferredWidth(40);  //SEXO
        tabela_Animal.getColumnModel().getColumn(4).setPreferredWidth(40);  //IDADE
        tabela_Animal.getColumnModel().getColumn(editar).setPreferredWidth(30); //EDITAR
        if(kernel.getUsuario().getNivel()==0){                    
        tabela_Animal.getColumnModel().getColumn(excluir).setPreferredWidth(30);//EXCLUIR
        }
        tabela_Animal.setDragEnabled(true);
        sp.setViewportView(tabela_Animal);        
        //ButtonColumn buttonColumn0 = new ButtonColumn(table, 0);//VER
        ButtonColumnAnimal buttonColumnAnimal1 = new ButtonColumnAnimal(tabela_Animal, editar);//EDITAR
        if(kernel.getUsuario().getNivel()==0){                    
        ButtonColumnAnimal buttonColumnAnimal2 = new ButtonColumnAnimal(tabela_Animal, excluir);//EXCLUIR
        }
    }

    //CLASSE BUTTONCOLUMN Animal
    class ButtonColumnAnimal extends AbstractCellEditor
         implements TableCellRenderer, TableCellEditor, ActionListener
     {
         JTable table;
         JButton renderButton;
         JButton editButton;
         String text;

         public ButtonColumnAnimal(JTable table, int column)
         {
             super();
             this.table = table;
             renderButton = new JButton();

             editButton = new JButton();
             
             editButton.setFocusPainted( false );
             editButton.addActionListener( this );

             TableColumnModel columnModel = table.getColumnModel();
             columnModel.getColumn(column).setCellRenderer( this );
             columnModel.getColumn(column).setCellEditor( this );
         }

         public Component getTableCellRendererComponent(
             JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
         {
             if (hasFocus)
             {
                 renderButton.setForeground(table.getForeground());
                 renderButton.setBackground(UIManager.getColor("Button.background"));
             }
             else if (isSelected)
             {
                 renderButton.setForeground(table.getSelectionForeground());
                 renderButton.setBackground(table.getSelectionBackground());
            }
             else
             {
                 renderButton.setForeground(table.getForeground());
                 renderButton.setBackground(UIManager.getColor("Button.background"));
             }

             renderButton.setBackground(new java.awt.Color(255, 255, 255));
             renderButton.setBorder(null);
             renderButton.setBorderPainted(false);
             renderButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

             text = (value == null) ? "" : value.toString();
             String imagem1 = text.equals("excluir")?"lixeira":"editar";
             renderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/"+imagem1+".png")));
             return renderButton;
         }

         public Component getTableCellEditorComponent(
             JTable table, Object value, boolean isSelected, int row, int column)
         {
             text = (value == null) ? "" : value.toString();             
             String imagem2 = text.equals("excluir")?"lixeira":"editar";
             editButton.setBackground(new java.awt.Color(255, 255, 255));
             editButton.setBorder(null);
             editButton.setBorderPainted(false);             
             editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/"+imagem2+".png")));
             editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
             //editButton.setText( text );
             return editButton;
         }

         public Object getCellEditorValue()
         {
             return text;
        }

         public void actionPerformed(ActionEvent e)
         {
             fireEditingStopped();

             switch(table.getSelectedColumn()){
                 case excluir:
                     SolicitaConfirmacaoAnimal();
                     TabelaAnimal();
                 break;
                 case editar:
                     PreencherFormulario(Integer.parseInt(table.getValueAt(table.getSelectedRow(),0).toString()));                     
                     DesabilitarBotoes();
                 break;
                 default:
                     kernel.Tela(0, kernel, 0,null,null);
                 break;
             }
             //System.out.println( "DADOS : " + table.getSelectedRow()+" "+" "+table.getSelectedColumn()+" "+table.getColumnCount()+" "+table.getValueAt(table.getSelectedRow(),0));
             
         }
     }
    private void SolicitaConfirmacaoAnimal(){
     boolean escolha = false;

     Object[] options = {"Sim",
                    "Não"};
    int resposta = JOptionPane.showOptionDialog(this,
        "Desejas excluir o registro ?",
        "Exclusão",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE,
        null,     //do not use a custom Icon
        options,  //the titles of buttons
        options[1]);
     
     if (resposta == 0) {
        bd_Animal.Excluir(Integer.parseInt(tabela_Animal.getValueAt(tabela_Animal.getSelectedRow(),0).toString()));
     }
     
    }
    
    private void VerificarComplementos(){
        //VERIFICANDO TAGS
        if((bd_AnimalTag.getTotal(Integer.parseInt(Animal_id.getText())))>0){             
            botao_tag.setForeground(new java.awt.Color(255, 0, 0));
        }else{
            botao_tag.setForeground(new java.awt.Color(0, 0, 0));
        }
        //VERIFICANDO SANGUE
        if(bd_Sangue.getTotal(Integer.parseInt(Animal_id.getText()))>0){            
            botao_sangue.setForeground(new java.awt.Color(255, 0, 0));
        }else{
            botao_sangue.setForeground(new java.awt.Color(0, 0, 0));
        }
        //VERIFICANDO RECAPTURA
        if(bd_Recaptura.getTotal(Integer.parseInt(Animal_id.getText()))>0){            
            botao_recaptura.setForeground(new java.awt.Color(255, 0, 0));
        }else{
            botao_recaptura.setForeground(new java.awt.Color(0, 0, 0));
        }
        //VERIFICANDO IDADE
        if(bd_Idade.getTotal(Integer.parseInt(Animal_id.getText()))>0){            
            botao_idade.setForeground(new java.awt.Color(255, 0, 0));
        }else{
            botao_idade.setForeground(new java.awt.Color(0, 0, 0));
        }
        //VERIFICANDO GORUDRA
        if(bd_Gordura.getTotal(Integer.parseInt(Animal_id.getText()))>0){            
            botao_gordura.setForeground(new java.awt.Color(255, 0, 0));
        }else{
            botao_gordura.setForeground(new java.awt.Color(0, 0, 0));
        }
        //VERIFICANDO CARRAPATO
        if(bd_Carrapato.getTotal(Integer.parseInt(Animal_id.getText()))>0){            
            botao_carrapato.setForeground(new java.awt.Color(255, 0, 0));
        }else{
            botao_carrapato.setForeground(new java.awt.Color(0, 0, 0));
        }
        //VERIFICANDO ANESTESIA
        if((bd_Anestesia.getTotal(Integer.parseInt(Animal_id.getText())))>0){                        
            botao_anestesia.setForeground(new java.awt.Color(255, 0, 0));
        }else{
            botao_anestesia.setForeground(new java.awt.Color(0, 0, 0));
        }
    }
    
    private void PreencherFormulario(int id){
    
         int id_reg = id;
         //System.out.println("ID: "+id_reg);
         obj_Animal = new Animal();
         obj_Animal = bd_Animal.getAnimalID(id_reg);
         
         Animal_id.setText(String.valueOf(obj_Animal.getAnimal_id()));        
                  
         //DADOS DO ANIMAL
         campo_pesototal.setText(String.valueOf(obj_Animal.getPeso_total()));
         campo_rede.setText(String.valueOf(obj_Animal.getPeso_rede()));
         campo_massa.setText(String.valueOf(obj_Animal.getMassa()));
         campo_comprimento.setText(String.valueOf(obj_Animal.getComprimento()));
         campo_circunferencia.setText(String.valueOf(obj_Animal.getCircunferencia()));
         campo_repr.setText(String.valueOf(obj_Animal.getRepr()));
         campo_condicao.setText(String.valueOf(obj_Animal.getCondicao()));
         campo_pesoestimado.setText(String.valueOf(obj_Animal.getPeso_estimado()));
         
         //DATA 
         String strData = new SimpleDateFormat("dd/MM/yyyy").format(obj_Animal.getData());
         String vet1[] = strData.split("/");
         campo_dia.setText(vet1[0]);
         campo_mes.setText(vet1[1]);
         campo_ano.setText(vet1[2]);
         
         //HORA
         String strHora = new SimpleDateFormat("HH:MM").format(obj_Animal.getHora());
         String vet2[] = strHora.split(":");
         campo_hora.setText(vet2[0]);
         campo_minuto.setText(vet2[1]);
         
         //SETANDO ESPECIE
         Especie_id.setText(String.valueOf(obj_Animal.getEspecie().getEspecie_id()));
         combo_Especie.setSelectedItem((Object)obj_Animal.getEspecie().getNome().toUpperCase());
         
         //SETANDO STATUS
         Status_id.setText(String.valueOf(obj_Animal.getStatus().getStatus_id()));
         combo_Status.setSelectedItem((Object)obj_Animal.getStatus().getNome().toUpperCase());
         
         //SETANDO SEXO
         Sexo_id.setText(String.valueOf(obj_Animal.getSexo().getSexo_id()));
         combo_Sexo.setSelectedItem((Object)obj_Animal.getSexo().getNome().toUpperCase());
         
         //SETANDO AREA
         if(obj_Animal.getArea()!=null){
         Area_id.setText(String.valueOf(obj_Animal.getArea().getArea_id()));
         combo_Area.setSelectedItem((Object)obj_Animal.getArea().getNome().toUpperCase());
         }
         
         //SETANDO OS RADIOS             
         pele_sim.setSelected(obj_Animal.isPele());
         bigode_sim.setSelected(obj_Animal.isBigode());
         instrumentos_sim.setSelected(obj_Animal.isInstrumento());
         dente_sim.setSelected(obj_Animal.isDente());         
     
         cadastro.setText("");
         acao=0;
    }
    
       
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Animal_id;
    private javax.swing.JLabel Area_id;
    private javax.swing.JLabel Especie_id;
    private javax.swing.JLabel Sexo_id;
    private javax.swing.JLabel Status_id;
    private javax.swing.JRadioButton bigode_nao;
    private javax.swing.JRadioButton bigode_sim;
    private javax.swing.JButton botao_anestesia;
    private javax.swing.JButton botao_carrapato;
    private javax.swing.JButton botao_gordura;
    private javax.swing.JButton botao_idade;
    private javax.swing.JButton botao_novo;
    private javax.swing.JButton botao_recaptura;
    private javax.swing.JButton botao_salvar;
    private javax.swing.JButton botao_sangue;
    private javax.swing.JButton botao_tag;
    private javax.swing.JButton busca_especies;
    private javax.swing.JButton busca_status;
    private javax.swing.JButton busca_status2;
    private javax.swing.JButton busca_status3;
    private javax.swing.JLabel cadastro;
    private javax.swing.JButton calcular_massa;
    private javax.swing.JTextField campo_ano;
    private javax.swing.JTextField campo_circunferencia;
    private javax.swing.JTextField campo_comprimento;
    private javax.swing.JTextField campo_condicao;
    private javax.swing.JTextField campo_dia;
    private javax.swing.JTextField campo_hora;
    private javax.swing.JTextField campo_massa;
    private javax.swing.JTextField campo_mes;
    private javax.swing.JTextField campo_minuto;
    private javax.swing.JTextField campo_pesoestimado;
    private javax.swing.JTextField campo_pesototal;
    private javax.swing.JTextField campo_rede;
    private javax.swing.JTextField campo_repr;
    private javax.swing.JComboBox combo_Area;
    private javax.swing.JComboBox combo_Especie;
    private javax.swing.JComboBox combo_Sexo;
    private javax.swing.JComboBox combo_Status;
    private javax.swing.JRadioButton dente_nao;
    private javax.swing.JRadioButton dente_sim;
    private javax.swing.ButtonGroup grupo_bigode;
    private javax.swing.ButtonGroup grupo_dente;
    private javax.swing.ButtonGroup grupo_instrumentos;
    private javax.swing.ButtonGroup grupo_pele;
    private javax.swing.JRadioButton instrumentos_nao;
    private javax.swing.JRadioButton instrumentos_sim;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel painel_cadastrar_area3;
    private javax.swing.JPanel painel_cadastrar_area4;
    private javax.swing.JRadioButton pele_nao;
    private javax.swing.JRadioButton pele_sim;
    private javax.swing.JScrollPane sp;
    private javax.swing.JTable tabela_Animal;
    private javax.swing.JButton voltar;
    // End of variables declaration//GEN-END:variables

}
