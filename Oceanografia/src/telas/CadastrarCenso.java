/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CadastrarCenso.java
 *
 * Created on 14/02/2011, 18:44:34
 */

package telas;

import banco.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import objetos.Kernel;
import objetos.Censo;
import objetos.Especie;
import objetos.Status;
import objetos.Area;
import objetos.Sexo;
import objetos.Data;

/**
 *
 * @author vagner
 */
public class CadastrarCenso extends javax.swing.JPanel {

    private Kernel          kernel;         
    private Censo           obj_Censo;
    private Especie         obj_Especie;
    private Status       obj_Status;
    private Area            obj_Area;
    private Data            obj_Data;
    private Sexo            obj_Sexo;    
    private BD_Censo        bd_Censo;
    private BD_Carrapato    bd_Carrapato;        
    private BD_Especie      bd_Especie;        
    private BD_Censo_Observacao bd_Censo_Observacao;
    private BD_Gordura      bd_Gordura;    
    private BD_AnimalCenso  bd_AnimalCenso;
    private BD_Status       bd_Status;    
    private BD_Data         bd_Data;    
    private BD_Area         bd_Area;
    private BD_Sangue       bd_Sangue;
    private BD_Recaptura    bd_Recaptura;
    private BD_Anestesia    bd_Anestesia;
    private BD_Sexo         bd_Sexo;    
    private BD_Idade        bd_Idade;               
    private int             acao;
    private Object          objeto;
    private final int editar  = 8;
    private final int excluir = 9;
    
    /** Creates new form CadastrarAnimais */
    public CadastrarCenso(Kernel obj,int acao,Object texto) {
        kernel      = obj;
        this.acao   = acao;
        this.objeto = texto;
        
        if(bd_Censo==null){             bd_Censo        = new BD_Censo(kernel);}
        if(bd_Carrapato==null){         bd_Carrapato    = new BD_Carrapato(kernel);}
        if(bd_Especie==null){           bd_Especie      = new BD_Especie(kernel);}
        if(bd_Gordura==null){           bd_Gordura      = new BD_Gordura(kernel);}
        if(bd_Status==null){         bd_Status    = new BD_Status(kernel);}
        if(bd_Area==null){              bd_Area         = new BD_Area(kernel);}
        if(bd_Sangue==null){            bd_Sangue       = new BD_Sangue(kernel);}
        if(bd_AnimalCenso==null){       bd_AnimalCenso  = new BD_AnimalCenso(kernel);}
        if(bd_Recaptura==null){         bd_Recaptura    = new BD_Recaptura(kernel);}
        if(bd_Anestesia==null){         bd_Anestesia    = new BD_Anestesia(kernel);}
        if(bd_Sexo==null){              bd_Sexo         = new BD_Sexo(kernel);}
        if(bd_Data==null){              bd_Data         = new BD_Data(kernel);}
        if(bd_Idade==null){             bd_Idade        = new BD_Idade(kernel);}        
        if(bd_Censo_Observacao==null){  bd_Censo_Observacao = new BD_Censo_Observacao(kernel);}        
        
        initComponents();                
        this.TabelaCenso();  
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupo_pele = new javax.swing.ButtonGroup();
        grupo_bigode = new javax.swing.ButtonGroup();
        grupo_instrumentos = new javax.swing.ButtonGroup();
        grupo_dente = new javax.swing.ButtonGroup();
        painel_cadastrar_area3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        combo_Especie = new javax.swing.JComboBox();
        combo_Status = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        combo_Area = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        combo_Sexo = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        campo_quantidade = new javax.swing.JTextField();
        Especie_id = new javax.swing.JLabel();
        Status_id = new javax.swing.JLabel();
        Area_id = new javax.swing.JLabel();
        Sexo_id = new javax.swing.JLabel();
        cadastro = new javax.swing.JLabel();
        combo_Data = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        Data_id = new javax.swing.JLabel();
        Censo_id = new javax.swing.JLabel();
        adicionar_animal = new javax.swing.JButton();
        observacao = new javax.swing.JButton();
        sp = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        painel_cadastrar_area4 = new javax.swing.JPanel();
        voltar = new javax.swing.JButton();
        botao_salvar = new javax.swing.JButton();
        botao_novo = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 204));
        setPreferredSize(new java.awt.Dimension(900, 549));

        painel_cadastrar_area3.setBackground(new java.awt.Color(204, 204, 204));
        painel_cadastrar_area3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Formulário Simples"));

        jLabel1.setText("Espécies:");

        combo_Especie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_Especie.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_EspecieItemStateChanged(evt);
            }
        });

        combo_Status.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_Status.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_StatusItemStateChanged(evt);
            }
        });

        jLabel3.setText("Status:");

        combo_Area.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_AreaItemStateChanged(evt);
            }
        });

        jLabel5.setText("Area:");

        combo_Sexo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_Sexo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_SexoItemStateChanged(evt);
            }
        });

        jLabel6.setText("Sexo:");

        jLabel10.setText("Quantidade:");

        Especie_id.setBackground(new java.awt.Color(0, 0, 0));
        Especie_id.setForeground(new java.awt.Color(204, 204, 204));
        Especie_id.setText("0");

        Status_id.setForeground(new java.awt.Color(204, 204, 204));
        Status_id.setText("0");

        Area_id.setForeground(new java.awt.Color(204, 204, 204));
        Area_id.setText("0");

        Sexo_id.setForeground(new java.awt.Color(204, 204, 204));
        Sexo_id.setText("0");

        cadastro.setForeground(new java.awt.Color(204, 0, 0));
        cadastro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        combo_Data.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_Data.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_DataItemStateChanged(evt);
            }
        });

        jLabel7.setText("Data:");

        Data_id.setForeground(new java.awt.Color(204, 204, 204));
        Data_id.setText("0");

        Censo_id.setForeground(new java.awt.Color(204, 204, 204));
        Censo_id.setText("0");

        adicionar_animal.setText("Add Animal");
        adicionar_animal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionar_animalActionPerformed(evt);
            }
        });

        observacao.setText("Observação / Correção");
        observacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                observacaoActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout painel_cadastrar_area3Layout = new org.jdesktop.layout.GroupLayout(painel_cadastrar_area3);
        painel_cadastrar_area3.setLayout(painel_cadastrar_area3Layout);
        painel_cadastrar_area3Layout.setHorizontalGroup(
            painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cadastro, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel10)
                            .add(jLabel6)
                            .add(jLabel1)
                            .add(jLabel7))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(combo_Sexo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 226, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, combo_Especie, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 226, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel5)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(combo_Area, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(combo_Status, 0, 225, Short.MAX_VALUE)))
                            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(combo_Data, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                        .add(4, 4, 4)
                                        .add(campo_quantidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(Censo_id)
                                        .add(5, 5, 5)
                                        .add(Especie_id)
                                        .add(5, 5, 5)
                                        .add(Status_id)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(Area_id)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(Sexo_id, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(Data_id)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(adicionar_animal, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(observacao, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        painel_cadastrar_area3Layout.setVerticalGroup(
            painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                .add(cadastro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel3)
                        .add(combo_Status, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(combo_Especie, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1))
                        .add(1, 1, 1)))
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel5)
                        .add(combo_Area, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel6)
                        .add(combo_Sexo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel7)
                            .add(combo_Data, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel10)
                            .add(campo_quantidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(Especie_id)
                            .add(Status_id)
                            .add(Area_id)
                            .add(Sexo_id)
                            .add(Data_id)
                            .add(Censo_id)))
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(adicionar_animal)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(observacao)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Cod", "Tag", "Sexo", "Area", "Espécie", "Idade", "Status", "Editar", "Excluir"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela.setDragEnabled(true);
        tabela.setRowHeight(25);
        tabela.getTableHeader().setReorderingAllowed(false);
        sp.setViewportView(tabela);

        painel_cadastrar_area4.setBackground(new java.awt.Color(204, 204, 204));
        painel_cadastrar_area4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        voltar.setBackground(new java.awt.Color(204, 204, 204));
        voltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/back.png"))); // NOI18N
        voltar.setToolTipText("Voltar");
        voltar.setBorder(null);
        voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarActionPerformed(evt);
            }
        });

        botao_salvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/salvar.png"))); // NOI18N
        botao_salvar.setToolTipText("Salvar registro");
        botao_salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_salvarActionPerformed(evt);
            }
        });

        botao_novo.setIcon(new javax.swing.ImageIcon("D:\\NetBeansProjects\\Oceanografia\\src\\icones\\novo.png")); // NOI18N
        botao_novo.setToolTipText("Novo registro");
        botao_novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_novoActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout painel_cadastrar_area4Layout = new org.jdesktop.layout.GroupLayout(painel_cadastrar_area4);
        painel_cadastrar_area4.setLayout(painel_cadastrar_area4Layout);
        painel_cadastrar_area4Layout.setHorizontalGroup(
            painel_cadastrar_area4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area4Layout.createSequentialGroup()
                .add(botao_salvar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(botao_novo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(voltar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painel_cadastrar_area4Layout.setVerticalGroup(
            painel_cadastrar_area4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(voltar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(painel_cadastrar_area4Layout.createSequentialGroup()
                .add(painel_cadastrar_area4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(botao_salvar)
                    .add(botao_novo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 0, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(sp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
            .add(painel_cadastrar_area4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(painel_cadastrar_area3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(painel_cadastrar_area4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(painel_cadastrar_area3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void combo_EspecieItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_EspecieItemStateChanged
        // TODO add your handling code here:
        Especie_id.setText(String.valueOf(bd_Especie.getEspecieIDNome((String)combo_Especie.getSelectedItem())));
    }//GEN-LAST:event_combo_EspecieItemStateChanged

    private void combo_StatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_StatusItemStateChanged
        // TODO add your handling code here:
        Status_id.setText(String.valueOf(bd_Status.getStatusIDNome((String)combo_Status.getSelectedItem())));
    }//GEN-LAST:event_combo_StatusItemStateChanged

    private void combo_AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_AreaItemStateChanged
        try {
            // TODO add your handling code here:
            Area_id.setText(String.valueOf(bd_Area.getAreaIDNome((String)combo_Area.getSelectedItem())));
        } catch (SQLException ex) {
            Logger.getLogger(CadastrarCenso.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_combo_AreaItemStateChanged

    private void combo_SexoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_SexoItemStateChanged
        // TODO add your handling code here:
         Sexo_id.setText(String.valueOf(bd_Sexo.getSexoIDNome((String)combo_Sexo.getSelectedItem())));
    }//GEN-LAST:event_combo_SexoItemStateChanged

    private void botao_salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_salvarActionPerformed
        // TODO add your handling code here:
        if(!campo_quantidade.getText().equals("")){
            SalvarCenso();
            HabilitarBotoes();             
        }
}//GEN-LAST:event_botao_salvarActionPerformed

    private void combo_DataItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_DataItemStateChanged
        try {
            // TODO add your handling code here:        
            Data_id.setText(String.valueOf(bd_Data.getDataIDNome((String)combo_Data.getSelectedItem())));
        } catch (SQLException ex) {
            Logger.getLogger(CadastrarCenso.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_combo_DataItemStateChanged

    private void botao_novoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_novoActionPerformed
        // TODO add your handling code here:
        LimparFormulario();
        DesabilitarBotoes();
}//GEN-LAST:event_botao_novoActionPerformed

    private void adicionar_animalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionar_animalActionPerformed
        // TODO add your handling code here:
        objeto = Censo_id.getText();
        kernel.Tela(29,kernel,0,objeto,null);
    }//GEN-LAST:event_adicionar_animalActionPerformed

    private void observacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_observacaoActionPerformed
        // TODO add your handling code here:
         kernel.Tela(35,kernel,1,Data_id.getText()+"-"+Area_id.getText(),null);
    }//GEN-LAST:event_observacaoActionPerformed

    private void voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarActionPerformed
        // TODO add your handling code here:
        kernel.Tela(42, kernel, 0, null, null);
    }//GEN-LAST:event_voltarActionPerformed

    //DESABILITANDO OS BOTOES
    private void DesabilitarBotoes(){
    /********** HABILITANDO OS BOTOES *****************/        
        botao_novo.setEnabled(false);
        botao_salvar.setEnabled(true);
        adicionar_animal.setEnabled(false);
        observacao.setEnabled(false);
        /****************************************************/
    }
    //HABILITAR OS BOTOES
    private void HabilitarBotoes(){
        /********** HABILITANDO OS BOTOES *****************/        
        botao_novo.setEnabled(true);
        botao_salvar.setEnabled(false);
        adicionar_animal.setEnabled(true);
        observacao.setEnabled(true);
        /****************************************************/
    }
    
    //LIMPANDO FORMULARIO
    private void LimparFormulario(){                  
         
         cadastro.setText("");
         
         //DADOS DO Censo
         campo_quantidade.setText("");
         
         //SETANDO AS DATAS
         //SETANDO ESPECIE
            Especie_id.setText("0");            
            Status_id.setText("0");            
            Sexo_id.setText("0");            
            Area_id.setText("0");            
            Data_id.setText("0");            
            Censo_id.setText("0");
        /********* PREENCHENDO O VETOR Especie *************/        
        Especie[] Especie_vetor = null;
        try {
                Especie_vetor = bd_Especie.getEspecies();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarCenso.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados1[] = new String[(Especie_vetor.length)+1];

        
        obj_Especie = new Especie();
        int pos = 0;
        for(int i=0; i < Especie_vetor.length; i++){
            obj_Especie = (Especie)Especie_vetor[i];
            if(i==0){
                dados1[i] = "Escolha";
                Especie_id.setText(String.valueOf(0));
            }
            if(acao==obj_Especie.getEspecie_id()){
              Especie_id.setText(String.valueOf(obj_Especie.getEspecie_id()));                                                        
            }           
            dados1[i+1] = String.valueOf(obj_Especie.getNome()).toUpperCase();            
        }
        
        combo_Especie.setModel(new javax.swing.DefaultComboBoxModel(dados1));        
        
        if(acao!=0){
            combo_Especie.setSelectedIndex(pos);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Status *************/        
        Status[] Status_vetor = null;
        try {
                Status_vetor = bd_Status.getStatuss();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarCenso.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados2[] = new String[(Status_vetor.length)+1];

        obj_Status = new Status();
        int pos2 = 0;
        for(int i=0; i < Status_vetor.length; i++){
            obj_Status = (Status)Status_vetor[i];
            if(i==0){
                dados2[i] = "Escolha";
                Status_id.setText(String.valueOf(0));
            }
            if(acao==obj_Status.getStatus_id()){
              Status_id.setText(String.valueOf(obj_Status.getStatus_id()));                                                        
            }           
            dados2[i+1] = String.valueOf(obj_Status.getNome()).toUpperCase(); 
            
        }
        combo_Status.setModel(new javax.swing.DefaultComboBoxModel(dados2));        
        
        if(acao!=0){
            combo_Status.setSelectedIndex(pos2);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Area *************/                
        Area[] Area_vetor = null;
        try {
                Area_vetor = bd_Area.getAreas();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarCenso.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados3[] = new String[Area_vetor.length];

        obj_Area = new Area();
        int pos3 = 0;
        for(int i=0; i < Area_vetor.length; i++){
            obj_Area = (Area)Area_vetor[i];
            dados3[i] = String.valueOf(obj_Area.getNome()).toUpperCase();
            if(acao!=0){                
                    if(acao==obj_Area.getArea_id()){
                        Area_id.setText(String.valueOf(obj_Area.getArea_id()));                                
                        pos3 = i;
                    }           
            }else if(i==0){
                Area_id.setText(String.valueOf(obj_Area.getArea_id()));
            }
        }
        combo_Area.setModel(new javax.swing.DefaultComboBoxModel(dados3));        
        
        if(acao!=0){
            combo_Area.setSelectedIndex(pos3);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Sexo *************/   
        Sexo[] Sexo_vetor = null;
        try {
                Sexo_vetor = bd_Sexo.getSexos();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarCenso.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados4[] = new String[(Sexo_vetor.length)+1];

        obj_Sexo = new Sexo();
        int pos4 = 0;
        for(int i=0; i < Sexo_vetor.length; i++){
           obj_Sexo = (Sexo)Sexo_vetor[i];
            if(i==0){
                dados4[i] = "Escolha";
                Sexo_id.setText(String.valueOf(0));
            }
            if(acao==obj_Sexo.getSexo_id()){
              Sexo_id.setText(String.valueOf(obj_Sexo.getSexo_id()));                                                        
            }           
            dados4[i+1] = String.valueOf(obj_Sexo.getNome()).toUpperCase(); 
        }
        combo_Sexo.setModel(new javax.swing.DefaultComboBoxModel(dados4));        
        
        if(acao!=0){
            combo_Sexo.setSelectedIndex(pos4);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Data *************/   
        Data[] Data_vetor = null;
        try {
                Data_vetor = bd_Data.getDatas();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarCenso.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados5[] = new String[Data_vetor.length];

        obj_Data = new Data();
        int pos5 = 0;
        for(int i=0; i < Data_vetor.length; i++){
            obj_Data = (Data)Data_vetor[i];
            dados5[i] = String.valueOf(new SimpleDateFormat("dd/MM/yyyy").format(obj_Data.getData()));
            if(acao!=0){                
                    if(acao==obj_Data.getData_id()){
                        Data_id.setText(String.valueOf(obj_Data.getData_id()));                                
                        pos5 = i;
                    }           
            }else if(i==0){
                Data_id.setText(String.valueOf(obj_Data.getData_id()));
            }
        }
        combo_Data.setModel(new javax.swing.DefaultComboBoxModel(dados5));        
        
        if(acao!=0){
            combo_Data.setSelectedIndex(pos5);
        }       
        /*****************************************************************/
    
    }    
    
    //SALVAR Censo
    private void SalvarCenso(){
        
        obj_Censo       = new Censo();
        obj_Especie     = new Especie();        
        obj_Status   = new Status();
        obj_Sexo        = new Sexo();
        obj_Area        = new Area();
        obj_Data        = new Data();
           
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");  
        
        if(Censo_id.getText().equals("0")){           
            
            //SETANDO DADOS DO Censo               
            obj_Censo.setQuantidade(Integer.parseInt((campo_quantidade.getText().equals("")?"0":campo_quantidade.getText())));             
           
            //SETANDO ESPECIE
            obj_Especie.setEspecie_id(Integer.parseInt(Especie_id.getText()));            
            obj_Censo.setEspecie(obj_Especie);
            
            //SETANDO Status
            obj_Status.setStatus_id(Integer.parseInt((!Sexo_id.getText().equals("0"))?Sexo_id.getText():"0"));            
            obj_Censo.setStatus(obj_Status);
                        
            //SETANDO SEXO            
            obj_Sexo.setSexo_id(Integer.parseInt((!Sexo_id.getText().equals("0"))?Sexo_id.getText():"0"));            
            obj_Censo.setSexo(obj_Sexo);
            
            //SETANDO AREA
            obj_Area.setArea_id(Integer.parseInt(Area_id.getText()));            
            obj_Censo.setArea(obj_Area);
            
            //SETANDO DATA
            obj_Data.setData_id(Integer.parseInt(Data_id.getText()));            
            obj_Censo.setData(obj_Data);
            
            Censo_id.setText(String.valueOf(bd_Censo.SalvarGetID(obj_Censo)));    
            cadastro.setText("Cadastro realizado com sucesso"); 
            
        }else{            
            //SETANDO DADOS DO Censo
            obj_Censo.setCenso_id(Integer.parseInt(Censo_id.getText()));
            
            //SETANDO DADOS DO Censo               
            obj_Censo.setQuantidade(Integer.parseInt((campo_quantidade.getText().equals("")?"0":campo_quantidade.getText())));             
           
            //SETANDO ESPECIE
            obj_Especie.setEspecie_id(Integer.parseInt(Especie_id.getText()));            
            obj_Censo.setEspecie(obj_Especie);
            
            //SETANDO Status
            obj_Status.setStatus_id(Integer.parseInt((!Sexo_id.getText().equals("0"))?Sexo_id.getText():"0"));            
            obj_Censo.setStatus(obj_Status);
                        
            //SETANDO SEXO            
            obj_Sexo.setSexo_id(Integer.parseInt((!Sexo_id.getText().equals("0"))?Sexo_id.getText():"0"));            
            obj_Censo.setSexo(obj_Sexo);
            
            //SETANDO AREA
            obj_Area.setArea_id(Integer.parseInt(Area_id.getText()));            
            obj_Censo.setArea(obj_Area);
            
            //SETANDO DATA
            obj_Data.setData_id(Integer.parseInt(Data_id.getText()));            
            obj_Censo.setData(obj_Data);            
            
            //SALVANDO OBJETO
            bd_Censo.Atualizar(obj_Censo);            
            cadastro.setText("Cadastro realizado com sucesso");             
        }
         this.TabelaCenso();  
         PreencherFormulario(Integer.parseInt(Censo_id.getText()));
         VerificarComplementos();
    }
    
    //TABELA Censo
    public void TabelaCenso(){
        if(acao==1){
            PreencherFormulario(Integer.parseInt((String)objeto));
            acao=0;
        }
        /********** DESABILITANDO OS BOTOES *****************/
        DesabilitarBotoes();
        /********* PREENCHENDO O VETOR Especie *************/        
        Especie[] Especie_vetor = null;
        try {
                Especie_vetor = bd_Especie.getEspecies();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarCenso.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados1[] = new String[(Especie_vetor.length)+1];

        
        obj_Especie = new Especie();
        int pos = 0;
        for(int i=0; i < Especie_vetor.length; i++){
            obj_Especie = (Especie)Especie_vetor[i];
            if(i==0){
                dados1[i] = "Escolha";
                Especie_id.setText(String.valueOf(0));
            }
            if(acao==obj_Especie.getEspecie_id()){
              Especie_id.setText(String.valueOf(obj_Especie.getEspecie_id()));                                                        
            }           
            dados1[i+1] = String.valueOf(obj_Especie.getNome()).toUpperCase();            
        }
        
        combo_Especie.setModel(new javax.swing.DefaultComboBoxModel(dados1));        
        
        if(acao!=0){
            combo_Especie.setSelectedIndex(pos);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Status *************/        
        Status[] Status_vetor = null;
        try {
                Status_vetor = bd_Status.getStatuss();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarCenso.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados2[] = new String[(Status_vetor.length)+1];

        obj_Status = new Status();
        int pos2 = 0;
        for(int i=0; i < Status_vetor.length; i++){
            obj_Status = (Status)Status_vetor[i];
            if(i==0){
                dados2[i] = "Escolha";
                Status_id.setText(String.valueOf(0));
            }
            if(acao==obj_Status.getStatus_id()){
              Status_id.setText(String.valueOf(obj_Status.getStatus_id()));                                                        
            }           
            dados2[i+1] = String.valueOf(obj_Status.getNome()).toUpperCase(); 
            
        }
        combo_Status.setModel(new javax.swing.DefaultComboBoxModel(dados2));        
        
        if(acao!=0){
            combo_Status.setSelectedIndex(pos2);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Area *************/        
        Area[] Area_vetor = null;
        try {
                Area_vetor = bd_Area.getAreas();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarCenso.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados3[] = new String[Area_vetor.length];

        obj_Area = new Area();
        int pos3 = 0;
        for(int i=0; i < Area_vetor.length; i++){
            obj_Area = (Area)Area_vetor[i];
            dados3[i] = String.valueOf(obj_Area.getNome()).toUpperCase();
            if(acao!=0){                
                    if(acao==obj_Area.getArea_id()){
                        Area_id.setText(String.valueOf(obj_Area.getArea_id()));                                
                        pos3 = i;
                    }           
            }else if(i==0){
                Area_id.setText(String.valueOf(obj_Area.getArea_id()));
            }
        }
        combo_Area.setModel(new javax.swing.DefaultComboBoxModel(dados3));        
        
        if(acao!=0){
            combo_Area.setSelectedIndex(pos3);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Sexo *************/   
        Sexo[] Sexo_vetor = null;
        try {
                Sexo_vetor = bd_Sexo.getSexos();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarCenso.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados4[] = new String[(Sexo_vetor.length)+1];

        obj_Sexo = new Sexo();
        int pos4 = 0;
        for(int i=0; i < Sexo_vetor.length; i++){
            obj_Sexo = (Sexo)Sexo_vetor[i];
            if(i==0){
                dados4[i] = "Escolha";
                Sexo_id.setText(String.valueOf(0));
            }
            if(acao==obj_Sexo.getSexo_id()){
              Sexo_id.setText(String.valueOf(obj_Sexo.getSexo_id()));                                                        
            }           
            dados4[i+1] = String.valueOf(obj_Sexo.getNome()).toUpperCase(); 
        }
        combo_Sexo.setModel(new javax.swing.DefaultComboBoxModel(dados4));        
        
        if(acao!=0){
            combo_Sexo.setSelectedIndex(pos4);
        }       
        /*****************************************************************/
        /********* PREENCHENDO O VETOR Data *************/   
        Data[] Data_vetor = null;
        try {
                Data_vetor = bd_Data.getDatas();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarCenso.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados5[] = new String[Data_vetor.length];

        obj_Data = new Data();
        int pos5 = 0;
        for(int i=0; i < Data_vetor.length; i++){
            obj_Data = (Data)Data_vetor[i];
            dados5[i] = String.valueOf(new SimpleDateFormat("dd/MM/yyyy").format(obj_Data.getData()));
            if(acao!=0){                
                    if(acao==obj_Data.getData_id()){
                        Data_id.setText(String.valueOf(obj_Data.getData_id()));                                
                        pos5 = i;
                    }           
            }else if(i==0){
                Data_id.setText(String.valueOf(obj_Data.getData_id()));
            }
        }
        combo_Data.setModel(new javax.swing.DefaultComboBoxModel(dados5));        
        
        if(acao!=0){
            combo_Data.setSelectedIndex(pos5);
        }       
        /*****************************************************************/        
        //PREECHENDO A TABELA Censo                
        Censo[] Censo_vetor = null;
        try {
            //VERIFICAR SE É BUSCA OU NÃO        
            Censo_vetor = bd_Censo.getCensos();
        } catch (SQLException ex2) {
            Logger.getLogger(CadastrarCenso.class.getName()).log(Level.SEVERE, null, ex2);
        }
        
        String dados[][] = new String[Censo_vetor.length][12];
        obj_Censo = new Censo();
        for(int i=0; i < Censo_vetor.length; i++){
            obj_Censo = (Censo)Censo_vetor[i];
            dados[i][0] = String.valueOf(obj_Censo.getCenso_id());            
            dados[i][1] = new SimpleDateFormat("dd/MM/yyyy").format(obj_Censo.getData().getData());
            dados[i][2] = ((obj_Censo.getEspecie()!=null)?String.valueOf(obj_Censo.getEspecie().getNome()):"");
            dados[i][3] = ((obj_Censo.getStatus()!=null)?String.valueOf(obj_Censo.getStatus().getNome()):"");            
            dados[i][4] = String.valueOf(obj_Censo.getArea().getNome());
            dados[i][5] = ((obj_Censo.getSexo()!=null)?String.valueOf(obj_Censo.getSexo().getNome()):"");              
            dados[i][6] = String.valueOf(obj_Censo.getQuantidade());       
            dados[i][7] = (((bd_AnimalCenso.getTotal(Integer.parseInt(Censo_id.getText())))>0)?"Possui":"Não possui");
            dados[i][editar]    = "editar";
            if(kernel.getUsuario().getNivel()==0){        
            dados[i][excluir]   = "excluir";
            }
        }
      
        
        tabela.setModel(new javax.swing.table.DefaultTableModel(
            dados,
            new String [] {"Cod", "Data","Espécie","Status","Area","Sexo","Quantidade","Animal","", ""}){
            Class[] types = new Class [] {
                java.lang.String.class, 
                java.lang.String.class,
                java.lang.String.class, 
                java.lang.String.class,
                java.lang.String.class, 
                java.lang.String.class,
                java.lang.String.class,
                java.lang.String.class,
                java.lang.String.class,
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
      
        tabela.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tabela.getColumnModel().getColumn(0).setPreferredWidth(50);
        tabela.getColumnModel().getColumn(1).setPreferredWidth(100);        
        tabela.getColumnModel().getColumn(2).setPreferredWidth(200);
        tabela.getColumnModel().getColumn(3).setPreferredWidth(200);        
        tabela.getColumnModel().getColumn(4).setPreferredWidth(200);
        tabela.getColumnModel().getColumn(5).setPreferredWidth(100);
        tabela.getColumnModel().getColumn(6).setPreferredWidth(100);
        tabela.getColumnModel().getColumn(7).setPreferredWidth(100);
        tabela.getColumnModel().getColumn(editar).setPreferredWidth(30);
        if(kernel.getUsuario().getNivel()==0){        
        tabela.getColumnModel().getColumn(excluir).setPreferredWidth(30);
        }
        tabela.setDragEnabled(true);
        sp.setViewportView(tabela);        
        //ButtonColumn buttonColumn0 = new ButtonColumn(table, 0);//VER
        ButtonColumnCenso buttonColumnCenso1 = new ButtonColumnCenso(tabela, editar);//EDITAR
        if(kernel.getUsuario().getNivel()==0){        
        ButtonColumnCenso buttonColumnCenso2 = new ButtonColumnCenso(tabela, excluir);//EXCLUIR
        }
    }

    private void VerificarComplementos() {
        //VERIFICANDO ANIMAL
        if((bd_AnimalCenso.getTotal(Integer.parseInt(Censo_id.getText())))>0){             
            adicionar_animal.setForeground(new java.awt.Color(255, 0, 0));
        }else{
            adicionar_animal.setForeground(new java.awt.Color(0, 0, 0));
        }
        
         //VERIFICANDO OBSERVACAO
        if((bd_Censo_Observacao.getTotal(Data_id.getText(),Area_id.getText()))>0){             
            observacao.setForeground(new java.awt.Color(255, 0, 0));
        }else{
            observacao.setForeground(new java.awt.Color(0, 0, 0));
        } 
    }

    //CLASSE BUTTONCOLUMN Censo
    class ButtonColumnCenso extends AbstractCellEditor
         implements TableCellRenderer, TableCellEditor, ActionListener
     {
         JTable table;
         JButton renderButton;
         JButton editButton;
         String text;

         public ButtonColumnCenso(JTable table, int column)
         {
             super();
             this.table = table;
             renderButton = new JButton();

             editButton = new JButton();
             
             editButton.setFocusPainted( false );
             editButton.addActionListener( this );

             TableColumnModel columnModel = table.getColumnModel();
             columnModel.getColumn(column).setCellRenderer( this );
             columnModel.getColumn(column).setCellEditor( this );
         }

         public Component getTableCellRendererComponent(
             JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
         {
             if (hasFocus)
             {
                 renderButton.setForeground(table.getForeground());
                 renderButton.setBackground(UIManager.getColor("Button.background"));
             }
             else if (isSelected)
             {
                 renderButton.setForeground(table.getSelectionForeground());
                 renderButton.setBackground(table.getSelectionBackground());
            }
             else
             {
                 renderButton.setForeground(table.getForeground());
                 renderButton.setBackground(UIManager.getColor("Button.background"));
             }

             renderButton.setBackground(new java.awt.Color(255, 255, 255));
             renderButton.setBorder(null);
             renderButton.setBorderPainted(false);
             renderButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

             text = (value == null) ? "" : value.toString();
             String imagem1 = text.equals("excluir")?"lixeira":"editar";
             renderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/"+imagem1+".png")));
             return renderButton;
         }

         public Component getTableCellEditorComponent(
             JTable table, Object value, boolean isSelected, int row, int column)
         {
             text = (value == null) ? "" : value.toString();             
             String imagem2 = text.equals("excluir")?"lixeira":"editar";
             editButton.setBackground(new java.awt.Color(255, 255, 255));
             editButton.setBorder(null);
             editButton.setBorderPainted(false);             
             editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/"+imagem2+".png")));
             editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
             //editButton.setText( text );
             return editButton;
         }

         public Object getCellEditorValue()
         {
             return text;
        }

         public void actionPerformed(ActionEvent e)
         {
             fireEditingStopped();

             switch(table.getSelectedColumn()){
                 case excluir:
                     SolicitaConfirmacaoCenso();
                     TabelaCenso();
                 break;
                 case editar:
                     PreencherFormulario(Integer.parseInt(table.getValueAt(table.getSelectedRow(),0).toString()));                     
                     DesabilitarBotoes();
                 break;
                 default:
                     kernel.Tela(0, kernel, 0,null,null);
                 break;
             }
             //System.out.println( "DADOS : " + table.getSelectedRow()+" "+" "+table.getSelectedColumn()+" "+table.getColumnCount()+" "+table.getValueAt(table.getSelectedRow(),0));
             
         }
     }
    private void SolicitaConfirmacaoCenso(){
     boolean escolha = false;

     Object[] options = {"Sim",
                    "Não"};
    int resposta = JOptionPane.showOptionDialog(this,
        "Desejas excluir o registro ?",
        "Exclusão",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE,
        null,     //do not use a custom Icon
        options,  //the titles of buttons
        options[1]);
     
     if (resposta == 0) {
        bd_Censo.Excluir(Integer.parseInt(tabela.getValueAt(tabela.getSelectedRow(),0).toString()));
     }
     
    }
       
    
    private void PreencherFormulario(int id){
         LimparFormulario();
         int id_reg = id;
         //System.out.println("ID: "+id_reg);
         obj_Censo = new Censo();
         obj_Censo = bd_Censo.getCensoID(id_reg);
         Censo_id.setText(String.valueOf(obj_Censo.getCenso_id()));                 
         
         cadastro.setText("");         
         //DADOS DO Censo
         campo_quantidade.setText(String.valueOf(obj_Censo.getQuantidade()));
        
         //SETANDO ESPECIE
         if(obj_Censo.getEspecie()!=null){
            Especie_id.setText(String.valueOf(obj_Censo.getEspecie().getEspecie_id()));
            combo_Especie.setSelectedItem((Object)obj_Censo.getEspecie().getNome().toUpperCase());
         }         
         
         //SETANDO Status
         if(obj_Censo.getStatus()!=null){
            Status_id.setText(String.valueOf(obj_Censo.getStatus().getStatus_id()));
            combo_Status.setSelectedItem((Object)obj_Censo.getStatus().getNome().toUpperCase());
         }
         
         //SETANDO SEXO
         if(obj_Censo.getSexo()!=null){
            Sexo_id.setText(String.valueOf(obj_Censo.getSexo().getSexo_id()));
            combo_Sexo.setSelectedItem((Object)obj_Censo.getSexo().getNome().toUpperCase());
         }
         
         //SETANDO AREA
         Area_id.setText(String.valueOf(obj_Censo.getArea().getArea_id()));
         combo_Area.setSelectedItem((Object)obj_Censo.getArea().getNome().toUpperCase());
         
         //SETANDO DATA
         Data_id.setText(String.valueOf(obj_Censo.getData().getData_id()));         
         combo_Data.setSelectedItem((Object)(new SimpleDateFormat("dd/MM/yyyy")).format(obj_Censo.getData().getData()));     
         
    }
     
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Area_id;
    private javax.swing.JLabel Censo_id;
    private javax.swing.JLabel Data_id;
    private javax.swing.JLabel Especie_id;
    private javax.swing.JLabel Sexo_id;
    private javax.swing.JLabel Status_id;
    private javax.swing.JButton adicionar_animal;
    private javax.swing.JButton botao_novo;
    private javax.swing.JButton botao_salvar;
    private javax.swing.JLabel cadastro;
    private javax.swing.JTextField campo_quantidade;
    private javax.swing.JComboBox combo_Area;
    private javax.swing.JComboBox combo_Data;
    private javax.swing.JComboBox combo_Especie;
    private javax.swing.JComboBox combo_Sexo;
    private javax.swing.JComboBox combo_Status;
    private javax.swing.ButtonGroup grupo_bigode;
    private javax.swing.ButtonGroup grupo_dente;
    private javax.swing.ButtonGroup grupo_instrumentos;
    private javax.swing.ButtonGroup grupo_pele;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton observacao;
    private javax.swing.JPanel painel_cadastrar_area3;
    private javax.swing.JPanel painel_cadastrar_area4;
    private javax.swing.JScrollPane sp;
    private javax.swing.JTable tabela;
    private javax.swing.JButton voltar;
    // End of variables declaration//GEN-END:variables

}
