/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CadastrarGordura.java
 *
 * Created on 14/02/2011, 18:44:34
 */

package telas;

import banco.BD_Gordura;
import banco.BD_LocalColeta;
import banco.BD_GorduraDestino;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import objetos.Kernel;
import objetos.Gordura;
import objetos.LocalColeta;
import objetos.GorduraDestino;
import objetos.Animal;

/**
 *
 * @author vagner
 */
public class CadastrarGordura extends javax.swing.JPanel {

    private Kernel              kernel;         
    private Gordura             obj_Gordura;    
    private LocalColeta         obj_Local_Coleta;    
    private GorduraDestino      obj_Gordura_Destino;    
    private Animal              obj_Animal;
    private BD_Gordura          bd_Gordura;
    private BD_LocalColeta      bd_LocalColeta;
    private BD_GorduraDestino   bd_GorduraDestino;
    private int                 acao;
    private Object              objeto;
    private final int editar  = 3;
    private final int excluir = 4;
    
    /** Creates new form CadastrarAnimais */
    public CadastrarGordura(Kernel obj,int acao,Object ob) {
        kernel      = obj;
        this.acao   = acao;
        this.objeto = ob;
        initComponents();                
        this.TabelaGordura();  
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        sp = new javax.swing.JScrollPane();
        tabela_Gordura = new javax.swing.JTable();
        painel_cadastrar_area3 = new javax.swing.JPanel();
        salvar_Gordura = new javax.swing.JButton();
        Gordura_id = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        combo_LocalColeta = new javax.swing.JComboBox();
        busca_localcoleta = new javax.swing.JButton();
        LocalColeta_id = new javax.swing.JLabel();
        busca_gorduradestino = new javax.swing.JButton();
        combo_GorduraDestino = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        GorduraDestino_id = new javax.swing.JLabel();
        Animal_id = new javax.swing.JLabel();
        botao_voltar = new javax.swing.JButton();

        jLabel2.setText("jLabel2");

        setBackground(new java.awt.Color(204, 204, 204));

        tabela_Gordura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Cod", "Local Coleta", "Gordura Destino", "Editar", "Excluir"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela_Gordura.setDragEnabled(true);
        tabela_Gordura.setRowHeight(25);
        tabela_Gordura.getTableHeader().setReorderingAllowed(false);
        sp.setViewportView(tabela_Gordura);

        painel_cadastrar_area3.setBackground(new java.awt.Color(204, 204, 204));
        painel_cadastrar_area3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        salvar_Gordura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/salvar.png"))); // NOI18N
        salvar_Gordura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvar_GorduraActionPerformed(evt);
            }
        });

        Gordura_id.setForeground(new java.awt.Color(204, 204, 204));
        Gordura_id.setText("0");

        jLabel1.setText("Local Coleta:");

        combo_LocalColeta.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_LocalColeta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_LocalColetaItemStateChanged(evt);
            }
        });

        busca_localcoleta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/question.gif"))); // NOI18N
        busca_localcoleta.setToolTipText("Caso não tenha a temporada, cadastre aqui.");
        busca_localcoleta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busca_localcoletaActionPerformed(evt);
            }
        });

        LocalColeta_id.setBackground(new java.awt.Color(0, 0, 0));
        LocalColeta_id.setForeground(new java.awt.Color(204, 204, 204));
        LocalColeta_id.setText("0");

        busca_gorduradestino.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/question.gif"))); // NOI18N
        busca_gorduradestino.setToolTipText("Caso não tenha a temporada, cadastre aqui.");
        busca_gorduradestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busca_gorduradestinoActionPerformed(evt);
            }
        });

        combo_GorduraDestino.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_GorduraDestino.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_GorduraDestinoItemStateChanged(evt);
            }
        });

        jLabel3.setText("Gordura Destino:");

        GorduraDestino_id.setBackground(new java.awt.Color(0, 0, 0));
        GorduraDestino_id.setForeground(new java.awt.Color(204, 204, 204));
        GorduraDestino_id.setText("0");

        Animal_id.setForeground(new java.awt.Color(204, 204, 204));
        Animal_id.setText("0");

        botao_voltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/back.png"))); // NOI18N
        botao_voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_voltarActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout painel_cadastrar_area3Layout = new org.jdesktop.layout.GroupLayout(painel_cadastrar_area3);
        painel_cadastrar_area3.setLayout(painel_cadastrar_area3Layout);
        painel_cadastrar_area3Layout.setHorizontalGroup(
            painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                .addContainerGap()
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(combo_LocalColeta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(11, 11, 11)
                        .add(busca_localcoleta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(combo_GorduraDestino, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(11, 11, 11)
                        .add(busca_gorduradestino, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 18, 18)
                .add(Animal_id)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(GorduraDestino_id)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(LocalColeta_id)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Gordura_id)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(botao_voltar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(salvar_Gordura, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painel_cadastrar_area3Layout.setVerticalGroup(
            painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Gordura_id)
                            .add(LocalColeta_id)
                            .add(GorduraDestino_id)
                            .add(Animal_id)))
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(salvar_Gordura)
                            .add(botao_voltar)
                            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(busca_localcoleta)
                                    .add(jLabel1)
                                    .add(combo_LocalColeta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(busca_gorduradestino)
                                    .add(jLabel3)
                                    .add(combo_GorduraDestino, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(painel_cadastrar_area3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(165, Short.MAX_VALUE))
            .add(sp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(painel_cadastrar_area3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void salvar_GorduraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvar_GorduraActionPerformed
        // TODO add your handling code here:
        SalvarGordura();
}//GEN-LAST:event_salvar_GorduraActionPerformed

    private void combo_LocalColetaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_LocalColetaItemStateChanged
        // TODO add your handling code here:
        LocalColeta_id.setText(String.valueOf(bd_LocalColeta.getLocalColetaIDNome((String)combo_LocalColeta.getSelectedItem())));
    }//GEN-LAST:event_combo_LocalColetaItemStateChanged

    private void busca_localcoletaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busca_localcoletaActionPerformed
        // TODO add your handling code here:
        /*
        objeto = null;
        if((!LocalColeta_id.getText().equals("0"))||(!GorduraDestino_id.getText().equals("0"))){
            objeto = LocalColeta_id.getText()+"-"+GorduraDestino_id.getText()+"-"+Gordura_id.getText();
        }
         kernel.Tela(9,kernel,1,objeto);    
         * 
         */
    }//GEN-LAST:event_busca_localcoletaActionPerformed

    private void busca_gorduradestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busca_gorduradestinoActionPerformed
        // TODO add your handling code here:
        /*
        objeto = null;
        if((!LocalColeta_id.getText().equals("0"))||(!GorduraDestino_id.getText().equals("0"))){
            objeto = LocalColeta_id.getText()+"-"+GorduraDestino_id.getText()+"-"+Gordura_id.getText();
        }
         kernel.Tela(8,kernel,1,objeto);  
         * 
         */
    }//GEN-LAST:event_busca_gorduradestinoActionPerformed

    private void combo_GorduraDestinoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_GorduraDestinoItemStateChanged
        // TODO add your handling code here:
        GorduraDestino_id.setText(String.valueOf(bd_GorduraDestino.getGorduraDestinoIDNome((String)combo_GorduraDestino.getSelectedItem())));
    }//GEN-LAST:event_combo_GorduraDestinoItemStateChanged

    private void botao_voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_voltarActionPerformed
        // TODO add your handling code here:
        kernel.Tela(21,null,2,Animal_id.getText(),null);
}//GEN-LAST:event_botao_voltarActionPerformed

    //SALVAR Gordura
    private void SalvarGordura(){
        
        bd_Gordura          = new BD_Gordura(kernel);        
        bd_GorduraDestino   = new BD_GorduraDestino(kernel);        
        bd_LocalColeta      = new BD_LocalColeta(kernel);
        obj_Gordura         = new Gordura();
        obj_Local_Coleta    = new LocalColeta();
        obj_Gordura_Destino = new GorduraDestino();
        
        
        if(Gordura_id.getText().equals("0")){
                obj_Gordura         = new Gordura();                
                obj_Local_Coleta    = new LocalColeta();
                obj_Gordura_Destino = new GorduraDestino();               
                obj_Animal          = new Animal();
                                
                //SETANDO LOCAL COLETA
                obj_Local_Coleta.setLocal_coleta_id(Integer.parseInt(LocalColeta_id.getText()));                
                
                //SENTANDO GORDURA DESTINO
                obj_Gordura_Destino.setGorduradestino_id(Integer.parseInt(GorduraDestino_id.getText()));                
                
                //SENTANDO ANIMAL
                obj_Animal.setAnimal_id(Integer.parseInt(Animal_id.getText()));                                
                
                //SETANDO GORDURA                
                obj_Gordura.setGorduradestino(obj_Gordura_Destino);
                obj_Gordura.setLocalcoleta(obj_Local_Coleta);
                obj_Gordura.setAnimal(obj_Animal);
                if((!LocalColeta_id.getText().equals("0"))||(!GorduraDestino_id.getText().equals("0"))){
                    bd_Gordura.Salvar(obj_Gordura);
                }
        }else{            
            
                obj_Gordura         = new Gordura();                
                obj_Local_Coleta    = new LocalColeta();
                obj_Gordura_Destino = new GorduraDestino();      
                obj_Animal          = new Animal();
                
                //SENTANDO GORDURA ID
                obj_Gordura.setGordura_id(Integer.parseInt(Gordura_id.getText()));
                
                //SETANDO LOCAL COLETA
                obj_Local_Coleta.setLocal_coleta_id(Integer.parseInt(LocalColeta_id.getText()));                
                
                //SENTANDO GORDURA DESTINO
                obj_Gordura_Destino.setGorduradestino_id(Integer.parseInt(GorduraDestino_id.getText()));                
                
                //SENTANDO ANIMAL
                obj_Animal.setAnimal_id(Integer.parseInt(Animal_id.getText()));                                
                
                //SETANDO GORDURA                
                obj_Gordura.setGorduradestino(obj_Gordura_Destino);
                obj_Gordura.setLocalcoleta(obj_Local_Coleta);
                obj_Gordura.setAnimal(obj_Animal);        
                            
                bd_Gordura.Atualizar(obj_Gordura);
        }
        TabelaGordura();        
        combo_LocalColeta.setSelectedIndex(0);
        combo_GorduraDestino.setSelectedIndex(0);        
        //PREENCHER A TABELA DE DADOS COM AS ÁREAS
        
    }
    
    //TABELA Gordura
    public void TabelaGordura(){
        
        bd_Gordura          = new BD_Gordura(kernel);        
        bd_GorduraDestino   = new BD_GorduraDestino(kernel);        
        bd_LocalColeta      = new BD_LocalColeta(kernel);
        obj_Gordura         = new Gordura();
        obj_Local_Coleta    = new LocalColeta();
        obj_Gordura_Destino = new GorduraDestino();
        
        //SENTANDO OS OBJETOS CARREGADOS
        if(objeto instanceof String){
            String vet[] = ((String)objeto).split("-");
            LocalColeta_id.setText(vet[0]);
            GorduraDestino_id.setText(vet[1]);
            Gordura_id.setText(vet[2]);            
        }else if(objeto instanceof Integer){
            Animal_id.setText(String.valueOf((Integer)objeto));
        }
        /********* PREENCHENDO O VETOR LocalColeta *************/
        LocalColeta[] LocalColeta_vetor = null;
        try {
                LocalColeta_vetor = bd_LocalColeta.getLocalColetas();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarGordura.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados1[] = new String[LocalColeta_vetor.length];

        LocalColeta obj_LocalColeta = new LocalColeta();
        int pos = 0;
        for(int i=0; i < LocalColeta_vetor.length; i++){
            obj_LocalColeta = (LocalColeta)LocalColeta_vetor[i];
            dados1[i] = String.valueOf(obj_LocalColeta.getNome()).toUpperCase();
            if(acao!=0){                
                    if(Integer.parseInt(LocalColeta_id.getText())==obj_LocalColeta.getLocal_coleta_id()){
                        LocalColeta_id.setText(String.valueOf(obj_LocalColeta.getLocal_coleta_id()));                                
                        pos = i;
                    }           
            }else if(i==0){
                LocalColeta_id.setText(String.valueOf(obj_LocalColeta.getLocal_coleta_id()));
            }
        }
        combo_LocalColeta.setModel(new javax.swing.DefaultComboBoxModel(dados1));        
        
        if(acao!=0){
            combo_LocalColeta.setSelectedIndex(pos);
        }        
        /*****************************************************************/        
        /********* PREENCHENDO O VETOR GorduraDestino *************/
        GorduraDestino[] GorduraDestino_vetor = null;
        try {
                GorduraDestino_vetor = bd_GorduraDestino.getGorduraDestinos();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarGordura.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados2[] = new String[GorduraDestino_vetor.length];

        GorduraDestino obj_GorduraDestino = new GorduraDestino();
        int pos1 = 0;
        for(int i=0; i < GorduraDestino_vetor.length; i++){
            obj_GorduraDestino = (GorduraDestino)GorduraDestino_vetor[i];
            dados2[i] = String.valueOf(obj_GorduraDestino.getNome()).toUpperCase();
            if(acao!=0){                
                    if(Integer.parseInt(GorduraDestino_id.getText())==obj_GorduraDestino.getGorduradestino_id()){
                        GorduraDestino_id.setText(String.valueOf(obj_GorduraDestino.getGorduradestino_id()));                                
                        pos1 = i;
                    }           
            }else if(i==0){
                GorduraDestino_id.setText(String.valueOf(obj_GorduraDestino.getGorduradestino_id()));
            }
        }
        combo_GorduraDestino.setModel(new javax.swing.DefaultComboBoxModel(dados2));        
        
        if(acao!=0){
            combo_GorduraDestino.setSelectedIndex(pos1);
        }        
        /*****************************************************************/
        
        //PREECHENDO A TABELA Gordura
        bd_Gordura = new BD_Gordura(kernel);
        Gordura[] Gordura_vetor = null;
        try {
            //VERIFICAR SE É BUSCA OU NÃO        
            Gordura_vetor = bd_Gordura.getGorduras((Integer)objeto);
        } catch (SQLException ex2) {
            Logger.getLogger(CadastrarGordura.class.getName()).log(Level.SEVERE, null, ex2);
        }
        
        
        String dados[][] = new String[Gordura_vetor.length][7];

        Gordura obj_Gordura = new Gordura();
        for(int i=0; i < Gordura_vetor.length; i++){
            obj_Gordura = (Gordura)Gordura_vetor[i];
            dados[i][0] = String.valueOf(obj_Gordura.getGordura_id());
            dados[i][1] = String.valueOf(obj_Gordura.getLocalcoleta().getNome());
            dados[i][2] = String.valueOf(obj_Gordura.getGorduradestino().getNome());
            dados[i][3] = "editar";
            dados[i][4] = "excluir";
         
        }
      
        
        tabela_Gordura.setModel(new javax.swing.table.DefaultTableModel(
            dados,
            new String [] {"Cod", "L. Coleta","G. Destino","", ""}){
            Class[] types = new Class [] {
                java.lang.String.class, 
                java.lang.String.class,
                java.lang.String.class, 
                java.lang.String.class,
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
      
        tabela_Gordura.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tabela_Gordura.getColumnModel().getColumn(0).setPreferredWidth(50);
        tabela_Gordura.getColumnModel().getColumn(1).setPreferredWidth(200);        
        tabela_Gordura.getColumnModel().getColumn(2).setPreferredWidth(200);
        tabela_Gordura.getColumnModel().getColumn(editar).setPreferredWidth(30);
        tabela_Gordura.getColumnModel().getColumn(excluir).setPreferredWidth(30);
        
        tabela_Gordura.setDragEnabled(true);
        sp.setViewportView(tabela_Gordura);        
        //ButtonColumn buttonColumn0 = new ButtonColumn(table, 0);//VER
        ButtonColumnGordura buttonColumnGordura1 = new ButtonColumnGordura(tabela_Gordura, editar);//EDITAR
        ButtonColumnGordura buttonColumnGordura2 = new ButtonColumnGordura(tabela_Gordura, excluir);//EXCLUIR
    }

    //CLASSE BUTTONCOLUMN Gordura
    class ButtonColumnGordura extends AbstractCellEditor
         implements TableCellRenderer, TableCellEditor, ActionListener
     {
         JTable table;
         JButton renderButton;
         JButton editButton;
         String text;

         public ButtonColumnGordura(JTable table, int column)
         {
             super();
             this.table = table;
             renderButton = new JButton();

             editButton = new JButton();
             
             editButton.setFocusPainted( false );
             editButton.addActionListener( this );

             TableColumnModel columnModel = table.getColumnModel();
             columnModel.getColumn(column).setCellRenderer( this );
             columnModel.getColumn(column).setCellEditor( this );
         }

         public Component getTableCellRendererComponent(
             JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
         {
             if (hasFocus)
             {
                 renderButton.setForeground(table.getForeground());
                 renderButton.setBackground(UIManager.getColor("Button.background"));
             }
             else if (isSelected)
             {
                 renderButton.setForeground(table.getSelectionForeground());
                 renderButton.setBackground(table.getSelectionBackground());
            }
             else
             {
                 renderButton.setForeground(table.getForeground());
                 renderButton.setBackground(UIManager.getColor("Button.background"));
             }

             renderButton.setBackground(new java.awt.Color(255, 255, 255));
             renderButton.setBorder(null);
             renderButton.setBorderPainted(false);
             renderButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

             text = (value == null) ? "" : value.toString();
             String imagem1 = text.equals("excluir")?"lixeira":"editar";
             renderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/"+imagem1+".png")));
             return renderButton;
         }

         public Component getTableCellEditorComponent(
             JTable table, Object value, boolean isSelected, int row, int column)
         {
             text = (value == null) ? "" : value.toString();             
             String imagem2 = text.equals("excluir")?"lixeira":"editar";
             editButton.setBackground(new java.awt.Color(255, 255, 255));
             editButton.setBorder(null);
             editButton.setBorderPainted(false);             
             editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/"+imagem2+".png")));
             editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
             //editButton.setText( text );
             return editButton;
         }

         public Object getCellEditorValue()
         {
             return text;
        }

         public void actionPerformed(ActionEvent e)
         {
             fireEditingStopped();

             switch(table.getSelectedColumn()){
                 case excluir:
                     SolicitaConfirmacaoGordura();
                     TabelaGordura();
                 break;
                 case editar:
                     int id_reg = Integer.parseInt(table.getValueAt(table.getSelectedRow(),0).toString());
                     obj_Gordura = bd_Gordura.getGorduraID(id_reg);
                     
                     Gordura_id.setText(String.valueOf(obj_Gordura.getGordura_id()));
                     LocalColeta_id.setText(String.valueOf(obj_Gordura.getLocalcoleta().getLocal_coleta_id()));
                     GorduraDestino_id.setText(String.valueOf(obj_Gordura.getGorduradestino().getGorduradestino_id()));
                     
                     combo_LocalColeta.setSelectedItem((Object)obj_Gordura.getLocalcoleta().getNome().toUpperCase());
                     combo_GorduraDestino.setSelectedItem((Object)obj_Gordura.getGorduradestino().getNome().toUpperCase());
                     
                 break;
                 default:
                     kernel.Tela(0, kernel, 0,null,null);
                 break;
             }
             //System.out.println( "DADOS : " + table.getSelectedRow()+" "+" "+table.getSelectedColumn()+" "+table.getColumnCount()+" "+table.getValueAt(table.getSelectedRow(),0));
             
         }
     }
    private void SolicitaConfirmacaoGordura(){
     boolean escolha = false;

     Object[] options = {"Sim",
                    "Não"};
    int resposta = JOptionPane.showOptionDialog(this,
        "Desejas excluir o registro ?",
        "Exclusão",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE,
        null,     //do not use a custom Icon
        options,  //the titles of buttons
        options[1]);
     
     if (resposta == 0) {
       bd_Gordura.Excluir(Integer.parseInt(tabela_Gordura.getValueAt(tabela_Gordura.getSelectedRow(),0).toString()));
     }
     
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Animal_id;
    private javax.swing.JLabel GorduraDestino_id;
    private javax.swing.JLabel Gordura_id;
    private javax.swing.JLabel LocalColeta_id;
    private javax.swing.JButton botao_voltar;
    private javax.swing.JButton busca_gorduradestino;
    private javax.swing.JButton busca_localcoleta;
    private javax.swing.JComboBox combo_GorduraDestino;
    private javax.swing.JComboBox combo_LocalColeta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel painel_cadastrar_area3;
    private javax.swing.JButton salvar_Gordura;
    private javax.swing.JScrollPane sp;
    private javax.swing.JTable tabela_Gordura;
    // End of variables declaration//GEN-END:variables

}
