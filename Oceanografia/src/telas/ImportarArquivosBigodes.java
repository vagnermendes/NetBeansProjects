/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportarArquivos.java
 *
 * Created on 27/04/2011, 13:43:07
 */

package telas;

import banco.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import objetos.*;

/**
 *
 * @author vagnerfeijomendes
 */
public class ImportarArquivosBigodes extends javax.swing.JPanel {
    
    private Kernel              kernel      = null;   
    private DefaultListModel    lista       = new DefaultListModel();
    private FileReader          reader      = null;
    private BD_Data             bd_Data     = null;
    private BD_Sexo             bd_Sexo     = null;
    private BD_Temporada        bd_Temporada= null;
    private BD_Especie          bd_Especie  = null;
    private BD_Bigodes          bd_Bigodes  = null;
    private BD_Area             bd_Area     = null;
    private BD_Animal           bd_Animal   = null;
    private BD_Recaptura        bd_Recaptura= null;
    private BD_Status           bd_Status   = null;
    private BD_Censo_Observacao bd_Censo    = null;
    private static File         arquivo     = null;          
    private int                 pos         = 0;
    private int                 acao;
    private Temporada           obj_Temporada   = new Temporada();
    private Sexo                obj_Sexo        = new Sexo();  
    private Area                obj_Area        = new Area();  
    private Recaptura           obj_Recaptura   = new Recaptura();  
    private Bigodes             obj_Bigodes     = new Bigodes();  
    private Status              obj_Status      = new Status();
    private Especie             obj_Especie     = new Especie();
    private LocalColeta         obj_Localcoleta = new LocalColeta();
    private Animal              obj_Animal      = new Animal();
    private SimpleDateFormat horaFormat = new SimpleDateFormat("HH:mm");          
    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); 
    /** Creates new form ImportarArquivos */
    public ImportarArquivosBigodes(Kernel obj,int acao,Object texto) {
        this.kernel = obj;
        initComponents();   
        bd_Area      = new BD_Area(kernel);
        bd_Data      = new BD_Data(kernel);
        bd_Sexo      = new BD_Sexo(kernel);
        bd_Censo     = new BD_Censo_Observacao(kernel);   
        bd_Temporada = new BD_Temporada(kernel);
        bd_Status    = new BD_Status(kernel);
        bd_Especie   = new BD_Especie(kernel);
        bd_Animal    = new BD_Animal(kernel);
        bd_Bigodes   = new BD_Bigodes(kernel);
        bd_Recaptura = new BD_Recaptura(kernel);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painel_cadastrar_area = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        botao_importar = new javax.swing.JButton();
        selecionar_arquivo = new javax.swing.JButton();
        Sexo_id = new javax.swing.JLabel();
        Categoria_id = new javax.swing.JLabel();
        Especie_id = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        conteudo_arquivo = new javax.swing.JTextArea();
        painel_cadastrar_area3 = new javax.swing.JPanel();
        voltar = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 204));

        painel_cadastrar_area.setBackground(new java.awt.Color(204, 204, 204));
        painel_cadastrar_area.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Importador de dados"));

        jLabel1.setText("Selecione o arquivo:");

        botao_importar.setText("Importar");
        botao_importar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_importarActionPerformed(evt);
            }
        });

        selecionar_arquivo.setText("Arquivo");
        selecionar_arquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecionar_arquivoActionPerformed(evt);
            }
        });

        Sexo_id.setForeground(new java.awt.Color(204, 204, 204));
        Sexo_id.setText("0");

        Categoria_id.setForeground(new java.awt.Color(204, 204, 204));
        Categoria_id.setText("0");

        Especie_id.setBackground(new java.awt.Color(0, 0, 0));
        Especie_id.setForeground(new java.awt.Color(204, 204, 204));
        Especie_id.setText("0");

        org.jdesktop.layout.GroupLayout painel_cadastrar_areaLayout = new org.jdesktop.layout.GroupLayout(painel_cadastrar_area);
        painel_cadastrar_area.setLayout(painel_cadastrar_areaLayout);
        painel_cadastrar_areaLayout.setHorizontalGroup(
            painel_cadastrar_areaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_areaLayout.createSequentialGroup()
                .add(jLabel1)
                .add(painel_cadastrar_areaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(painel_cadastrar_areaLayout.createSequentialGroup()
                        .add(207, 207, 207)
                        .add(Especie_id)
                        .add(5, 5, 5)
                        .add(Categoria_id)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Sexo_id, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(painel_cadastrar_areaLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(selecionar_arquivo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(botao_importar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        painel_cadastrar_areaLayout.setVerticalGroup(
            painel_cadastrar_areaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_areaLayout.createSequentialGroup()
                .add(painel_cadastrar_areaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(selecionar_arquivo)
                    .add(botao_importar))
                .add(84, 84, 84)
                .add(painel_cadastrar_areaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Especie_id)
                    .add(Categoria_id)
                    .add(Sexo_id))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Dados no arquivo"));

        conteudo_arquivo.setColumns(20);
        conteudo_arquivo.setRows(5);
        jScrollPane3.setViewportView(conteudo_arquivo);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 937, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
        );

        painel_cadastrar_area3.setBackground(new java.awt.Color(204, 204, 204));
        painel_cadastrar_area3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        voltar.setBackground(new java.awt.Color(204, 204, 204));
        voltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/back.png"))); // NOI18N
        voltar.setToolTipText("Voltar");
        voltar.setBorder(null);
        voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout painel_cadastrar_area3Layout = new org.jdesktop.layout.GroupLayout(painel_cadastrar_area3);
        painel_cadastrar_area3.setLayout(painel_cadastrar_area3Layout);
        painel_cadastrar_area3Layout.setHorizontalGroup(
            painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                .add(voltar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );
        painel_cadastrar_area3Layout.setVerticalGroup(
            painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(voltar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(painel_cadastrar_area, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(591, Short.MAX_VALUE))
            .add(painel_cadastrar_area3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(painel_cadastrar_area3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(painel_cadastrar_area, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 51, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selecionar_arquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecionar_arquivoActionPerformed
        // TODO add your handling code here:
        String imagens[]; 
        JFileChooser fc = new JFileChooser();   
        fc.setMultiSelectionEnabled(true);   
  
        fc.showOpenDialog(this);   
        arquivo = fc.getSelectedFile().getAbsoluteFile();
        if(fc.getSelectedFile()!=null){
            try {               
                
                //LENDO O ARQUIVO                   
                try {
                    reader = new FileReader(arquivo);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ImportarArquivosBigodes.class.getName()).log(Level.SEVERE, null, ex);
                }
                BufferedReader leitor = new BufferedReader(reader); 
                String linha = "";   
                String texto = "";
                pos=1;
                
                while(leitor.ready()) {   
                    linha = leitor.readLine();                                        
                    pos++;
                    
                    //String ln = "Linha ("+pos+++"): "+linha+"\n";                                        
                    //texto += ln;
                } 
                //conteudo_arquivo.setText(texto);                
                leitor.close();
            } catch (IOException ex) {
                Logger.getLogger(ImportarArquivosBigodes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        
    }//GEN-LAST:event_selecionar_arquivoActionPerformed

    private void botao_importarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_importarActionPerformed
        // TODO add your handling code here:
        String txt = "Importando....\n\n";        
        try {
            ImportarDados();
        } catch (IOException ex) {
            Logger.getLogger(ImportarArquivosBigodes.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ImportarArquivosBigodes.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        txt += "Importação encerrada com sucesso.";           
        conteudo_arquivo.setText(txt);
    }//GEN-LAST:event_botao_importarActionPerformed

    private void voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarActionPerformed
        // TODO add your handling code here:
          kernel.Tela(37, kernel, 0, 0, null);
    }//GEN-LAST:event_voltarActionPerformed
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Categoria_id;
    private javax.swing.JLabel Especie_id;
    private javax.swing.JLabel Sexo_id;
    private javax.swing.JButton botao_importar;
    private javax.swing.JTextArea conteudo_arquivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel painel_cadastrar_area;
    private javax.swing.JPanel painel_cadastrar_area3;
    private javax.swing.JButton selecionar_arquivo;
    private javax.swing.JButton voltar;
    // End of variables declaration//GEN-END:variables

    private void ImportarDados() throws IOException, SQLException {
       
        //LENDO O ARQUIVO 
        reader = new FileReader(arquivo);
        BufferedReader leitor = new BufferedReader(reader); 
        String linha = "";   
        String texto = "";        
        String vetorlinhadados[]    = null;
        String vetorregistros[][] = new String[pos][9];
        
        int posicaolinha=0;
        int linhavetor = 0;
        int posicaocoluna=0;
        while(leitor.ready()) {   
            linha = leitor.readLine();                
            //INSERINDO DADOS DENTRO DO VETOR
            if(posicaolinha!=0){                
                //System.out.println(linha);
                vetorlinhadados = linha.toUpperCase().split(";");                    
                vetorregistros[linhavetor][0] = vetorlinhadados[0];
                vetorregistros[linhavetor][1] = vetorlinhadados[1];
                vetorregistros[linhavetor][2] = vetorlinhadados[2];
                vetorregistros[linhavetor][3] = vetorlinhadados[3];
                vetorregistros[linhavetor][4] = vetorlinhadados[4];
                vetorregistros[linhavetor][5] = vetorlinhadados[5];
                vetorregistros[linhavetor][6] = vetorlinhadados[6];
                vetorregistros[linhavetor][7] = vetorlinhadados[7];
                vetorregistros[linhavetor++][8] = (vetorlinhadados.length==9)?vetorlinhadados[8]:"";
              
            }
            posicaolinha++;
        }
        
        for(int x=0; x < (vetorregistros.length-2);x++){
            //System.out.println("Linha: "+x+" Tamanho: "+(vetorregistros.length-2));
            if((x+1)!=(vetorregistros.length-2)){
              //VERIFICANDO DUPLICIDADE              
              if((vetorregistros[x][2].toString().equals(vetorregistros[x+1][2].toString()))){
                  texto = "LINHA ("+ (x+1) +"):"+vetorregistros[x][0]+" "+
                    vetorregistros[x][1]+" "+
                    vetorregistros[x][2]+" "+
                    vetorregistros[x][3]+" "+
                    vetorregistros[x][4]+" "+
                    vetorregistros[x][5]+" "+
                    vetorregistros[x][6]+" "+
                    vetorregistros[x][7]+" "+
                    vetorregistros[x][8];
                 texto += "\nLINHA ("+ (x+2) +"):"+vetorregistros[x+1][0]+" "+
                    vetorregistros[x+1][1]+" "+
                    vetorregistros[x+1][2]+" "+
                    vetorregistros[x+1][3]+" "+
                    vetorregistros[x+1][4]+" "+
                    vetorregistros[x+1][5]+" "+
                    vetorregistros[x+1][6]+" "+
                    vetorregistros[x+1][7]+" "+
                    vetorregistros[x+1][8]; 

                  conteudo_arquivo.setText(texto);                
                  
                  Object[] options = {"Sim","Não"};
                  int resposta = JOptionPane.showOptionDialog(this,
                    "Registro duplicado, proseguir ?",
                    "Conflito",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE,
                    null,     //do not use a custom Icon
                    options,  //the titles of buttons
                    options[1]);
     
                    if (resposta != 0) {
                        x = vetorregistros.length;                       
                    }else if(resposta ==0){
                         Object[] options2 = {"Novo","Recaptura"};
                         resposta = JOptionPane.showOptionDialog(this,
                        "Verifique se as datas são diferentes ou espécies diferentes ou anos diferentes, Novo para novo registro e Recaptura para reavistagem !",
                        "Conflito",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE,
                        null,     //do not use a custom Icon
                        options2,  //the titles of buttons
                        options2[1]);
                         
                        if (resposta == 0){                            
                            //FAZER UMA FARREDURA NO BANCO DE DADOS PARA VER SE NÃO JÁ NÃO FOI INSERIDO ESTE ANIMAL
                            InserirAnimal(vetorregistros,x);
                        }else{
                            //COLOCAR O REGISTRO DENTRO DA TABELA DE RECAPTURA                            
                            InserirRecaptura(vetorregistros,x);
                        }  
                    }     
              }else{
                    //SENÃO INSERIR O ANIMAL NORMALMENTE
                    InserirAnimal(vetorregistros,x);
              }
            }else{
                InserirAnimal(vetorregistros,(x));
            }      
            
        }
    }

  
    private void InserirAnimal(String[][] vetor,int indice) throws SQLException {
        int temporada_id = 0;
        int sexo_id      = 0;
        int status_id    = 0;
        int especie_id   = 0;
        int area_id      = 0;
        int animal_id    = 0;
        int bigodes_id   = 0;
        /*
         System.out.println("TAMANHO: "+vetor.length+" "+
                    vetor[indice][0]+" "+
                    vetor[indice][1]+" "+
                    vetor[indice][2]+" "+
                    vetor[indice][3]+" "+
                    vetor[indice][4]+" "+
                    vetor[indice][5]+" "+
                    vetor[indice][6]+" "+
                    vetor[indice][7]+" "+
                    vetor[indice][8]);
         */
        //INSERINDO TEMPORADA (ANO)                
        if(bd_Temporada.getTemporadaIDNome(vetor[indice][0])==0){            
            obj_Temporada.setNome(vetor[indice][0]);
            temporada_id = bd_Temporada.SalvarGetID(obj_Temporada);
        }else{
            temporada_id = bd_Temporada.getTemporadaIDNome(vetor[indice][0]);
        }
        
        //INSERINDO SEXO DO ANIMAL
        if(bd_Sexo.getSexoIDNome(vetor[indice][4])==0){            
            obj_Sexo.setNome(vetor[indice][4]);
            sexo_id = bd_Sexo.SalvarGetID(obj_Sexo);
        }else{
            sexo_id = bd_Sexo.getSexoIDNome(vetor[indice][4]);
        }
        
        //INSERINDO STATUS DO ANIMAL, PARA IDENTIFICAR SE ELE É UM ANIMAL JOVEM OU ADULTO
        if(bd_Status.getStatusIDNome(vetor[indice][6])==0){            
            obj_Status.setNome(vetor[indice][6]);
            status_id = bd_Status.SalvarGetID(obj_Status);
        }else{
            status_id = bd_Status.getStatusIDNome(vetor[indice][6]);
        }
        
        //INSERINDO ESPECIE DO ANIMAL
        if(bd_Especie.getEspecieIDNome(vetor[indice][7])==0){            
            obj_Especie.setNome(vetor[indice][7]);
            especie_id = bd_Especie.SalvarGetID(obj_Especie);
        }else{
            especie_id = bd_Especie.getEspecieIDNome(vetor[indice][7]);
        }
        
        //INSERINDO A ÁREA DE CAPTURA
        if(vetor[indice][8]!=""){
            if(bd_Area.getAreaIDNome(vetor[indice][8])==0){            
                obj_Area.setNome(vetor[indice][8]);
                area_id = bd_Area.SalvarGetID(obj_Area);
            }else{
                area_id = bd_Area.getAreaIDNome(vetor[indice][8]);
            }        
        }
               
               
        //INSERIR ANIMAL         
            obj_Animal.setCircunferencia(0.0);  
            obj_Animal.setMassa(0.0);   
            obj_Animal.setCondicao(0.0);  
            obj_Animal.setPeso_estimado(0.0);  
            obj_Animal.setComprimento(0.0);   
            obj_Animal.setPeso_rede(0.0);   
            obj_Animal.setPeso_total(0.0);   
            obj_Animal.setRepr(0.0);  
            obj_Animal.setPele(false);             
            obj_Animal.setDente(false); 
            obj_Animal.setInstrumento(false); 
            //CAMPO HORAS
            String sHora = ("00:00");
            try {
                obj_Animal.setHora(horaFormat.parse(sHora));
            } catch (ParseException ex) {
                Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //CAMPO DATA
            if(!((String)vetor[indice][5]).equals("")){
                String sDate = "";
                if(((String)vetor[indice][5]).contains("/")){
                    String vet[] = ((String)vetor[indice][5]).split("/");
                    if((vet[0].length()==2)&&(vet[1].length()==2)&&(vet[2].length()==4)){
                        sDate = vet[2]+"-"+vet[1]+"-"+vet[0];
                    }else if((vet[0].length()==4)&&(vet[1].length()==2)&&(vet[2].length()==2)){
                        sDate = vet[0]+"-"+vet[1]+"-"+vet[2];
                    }
                }else if(((String)vetor[indice][5]).contains("-")){
                    String vet[] = ((String)vetor[indice][5]).split("-");
                    if((vet[0].length()==2)&&(vet[1].length()==2)&&(vet[2].length()==4)){
                        sDate = vet[2]+"-"+vet[1]+"-"+vet[0];
                    }else if((vet[0].length()==4)&&(vet[1].length()==2)&&(vet[2].length()==2)){
                        sDate = vet[0]+"-"+vet[1]+"-"+vet[2];
                    }
                }
                //System.out.println("DATA: "+sDate);
                try {
                    obj_Animal.setData(dateFormat.parse(sDate));
                } catch (ParseException ex) {
                    Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{                
                String sDate = "0000-00-00";
                try {
                    obj_Animal.setData(dateFormat.parse(sDate));
                } catch (ParseException ex) {
                    Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            //SETANDO ESPECIE
            obj_Especie.setEspecie_id(especie_id);            
            obj_Animal.setEspecie(obj_Especie);
            
            //SETANDO STATUS
            obj_Status.setStatus_id(status_id);            
            obj_Animal.setStatus(obj_Status);
            
            //SETANDO SEXO
            obj_Sexo.setSexo_id(sexo_id);            
            obj_Animal.setSexo(obj_Sexo);
            
            //SETANDO AREA
            obj_Area.setArea_id(area_id);            
            obj_Animal.setArea(obj_Area);
            
            obj_Animal.setId(vetor[indice][2]);
                                     //( id, String sexo, String dia, String fase, String especie)
            if(bd_Animal.getAnimalIDAno(vetor[indice][2], vetor[indice][4],vetor[indice][6],vetor[indice][7])==null){            
                    //VERIFICAR SE NÃO HÁ REGISTRO ANTERIOR DO ANIMAL PARA DEPOIS INSERIR ELE
                    animal_id = bd_Animal.SalvarGetID(obj_Animal);


                    //INSERIR BIGODES
                    //CAMPO DATA            
                    if(!((String)vetor[indice][5]).equals("")){
                        String sDate = "";
                        if(((String)vetor[indice][5]).contains("/")){
                            String vet1[] = ((String)vetor[indice][5]).split("/");
                            if((vet1[0].length()==2)&&(vet1[1].length()==2)&&(vet1[2].length()==4)){
                                sDate = vet1[2]+"-"+vet1[1]+"-"+vet1[0];
                            }else if((vet1[0].length()==4)&&(vet1[1].length()==2)&&(vet1[2].length()==2)){
                                sDate = vet1[0]+"-"+vet1[1]+"-"+vet1[2];
                            }
                        }else if(((String)vetor[indice][5]).contains("-")){
                            String vet1[] = ((String)vetor[indice][5]).split("-");
                            if((vet1[0].length()==2)&&(vet1[1].length()==2)&&(vet1[2].length()==4)){
                                sDate = vet1[2]+"-"+vet1[1]+"-"+vet1[0];
                            }else if((vet1[0].length()==4)&&(vet1[1].length()==2)&&(vet1[2].length()==2)){
                                sDate = vet1[0]+"-"+vet1[1]+"-"+vet1[2];
                            }
                        }
                      // System.out.println("DATA: "+sDate);
                        try {
                            obj_Bigodes.setData(dateFormat.parse(sDate));
                        } catch (ParseException ex) {
                            Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }else{            
                        String sDate = "0000-00-00";
                        try {
                            obj_Animal.setData(dateFormat.parse(sDate));
                        } catch (ParseException ex) {
                            Logger.getLogger(CadastrarAnimal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    obj_Animal = new Animal();
                    obj_Animal.setAnimal_id(animal_id);
                    obj_Bigodes.setAnimal(obj_Animal);        

                    obj_Localcoleta = new LocalColeta();
                    obj_Localcoleta.setLocal_coleta_id(0);
                    obj_Bigodes.setLocalcoleta(obj_Localcoleta); 

                    bigodes_id = bd_Bigodes.SalvarGetID(obj_Bigodes);
            }  
        //MONITORANDO OS REGISTROS
        //System.out.println("ANIMAL_ID: "+vetor[indice][2]);
        
        
    }

    private void InserirRecaptura(String[][] vetor,int indice){
        
        //O ANIMAL                                   ID              SEXO           FASE            ESPECIE
        obj_Animal = bd_Animal.getAnimalIDAno(vetor[indice][2],vetor[indice][4],vetor[indice][6],vetor[indice][7]);
        obj_Recaptura.setAnimal(obj_Animal);
        
        //RECAPTURA
        String vet1[] = ((String)vetor[indice][5]).split("/");
        String sDate = vet1[2]+"-"+vet1[1]+"-"+vet1[0];
        try {
            obj_Recaptura.setData(dateFormat.parse(sDate));
        } catch (ParseException ex) {
            Logger.getLogger(ImportarArquivosBigodes.class.getName()).log(Level.SEVERE, null, ex);
        }
                
        bd_Recaptura.Salvar(obj_Recaptura);
    }

}