/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CadastrarEpoca.java
 *
 * Created on 14/02/2011, 18:44:34
 */

package telas;

import banco.BD_Epoca;
import banco.BD_Temporada;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import objetos.Kernel;
import objetos.Epoca;
import objetos.Temporada;

/**
 *
 * @author vagner
 */
public class CadastrarEpoca extends javax.swing.JPanel {

    private Kernel         kernel;         
    private Epoca          obj_Epoca;    
    private Temporada      obj_Temporada;    
    private BD_Epoca       bd_Epoca;
    private BD_Temporada   bd_Temporada;
    private int            acao;
    private Object         objeto;
    private final int editar  = 3;
    private final int excluir = 4;
    
    /** Creates new form CadastrarAnimais */
    public CadastrarEpoca(Kernel obj,int acao,Object texto) {
        kernel = obj;
        this.acao = acao;
        this.objeto = texto;
        initComponents();                
        this.TabelaEpoca();        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sp = new javax.swing.JScrollPane();
        tabela_Epoca = new javax.swing.JTable();
        painel_cadastrar_area3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        nome_Epoca = new javax.swing.JTextField();
        Epoca_id = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        combo_Temporada = new javax.swing.JComboBox();
        busca_temporada = new javax.swing.JButton();
        Temporada_id = new javax.swing.JLabel();
        painel_cadastrar_area4 = new javax.swing.JPanel();
        voltar = new javax.swing.JButton();
        salvar_Epoca = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 204));

        tabela_Epoca.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Cod", "Epoca", "Temporada", "Editar", "Excluir"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela_Epoca.setDragEnabled(true);
        tabela_Epoca.setRowHeight(25);
        tabela_Epoca.getTableHeader().setReorderingAllowed(false);
        sp.setViewportView(tabela_Epoca);

        painel_cadastrar_area3.setBackground(new java.awt.Color(204, 204, 204));
        painel_cadastrar_area3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setText("Época:");

        nome_Epoca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nome_EpocaKeyPressed(evt);
            }
        });

        Epoca_id.setForeground(new java.awt.Color(204, 204, 204));
        Epoca_id.setText("0");

        jLabel1.setText("Temporada:");

        combo_Temporada.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_Temporada.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_TemporadaItemStateChanged(evt);
            }
        });

        busca_temporada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/question.gif"))); // NOI18N
        busca_temporada.setToolTipText("Caso não tenha a temporada, cadastre aqui.");
        busca_temporada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busca_temporadaActionPerformed(evt);
            }
        });

        Temporada_id.setForeground(new java.awt.Color(204, 204, 204));
        Temporada_id.setText("0");

        org.jdesktop.layout.GroupLayout painel_cadastrar_area3Layout = new org.jdesktop.layout.GroupLayout(painel_cadastrar_area3);
        painel_cadastrar_area3.setLayout(painel_cadastrar_area3Layout);
        painel_cadastrar_area3Layout.setHorizontalGroup(
            painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel1)
                    .add(jLabel4))
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(combo_Temporada, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(busca_temporada, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(nome_Epoca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 202, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Temporada_id)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Epoca_id, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(76, Short.MAX_VALUE))
        );
        painel_cadastrar_area3Layout.setVerticalGroup(
            painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area3Layout.createSequentialGroup()
                .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Epoca_id)
                            .add(Temporada_id)))
                    .add(painel_cadastrar_area3Layout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(nome_Epoca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(8, 8, 8)
                        .add(painel_cadastrar_area3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(combo_Temporada, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(busca_temporada))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painel_cadastrar_area4.setBackground(new java.awt.Color(204, 204, 204));
        painel_cadastrar_area4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        voltar.setBackground(new java.awt.Color(204, 204, 204));
        voltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/back.png"))); // NOI18N
        voltar.setToolTipText("Voltar");
        voltar.setBorder(null);
        voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarActionPerformed(evt);
            }
        });

        salvar_Epoca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/salvar.png"))); // NOI18N
        salvar_Epoca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvar_EpocaActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout painel_cadastrar_area4Layout = new org.jdesktop.layout.GroupLayout(painel_cadastrar_area4);
        painel_cadastrar_area4.setLayout(painel_cadastrar_area4Layout);
        painel_cadastrar_area4Layout.setHorizontalGroup(
            painel_cadastrar_area4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_area4Layout.createSequentialGroup()
                .add(1, 1, 1)
                .add(salvar_Epoca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(voltar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painel_cadastrar_area4Layout.setVerticalGroup(
            painel_cadastrar_area4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(voltar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(painel_cadastrar_area4Layout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(salvar_Epoca))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(sp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(painel_cadastrar_area3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(247, Short.MAX_VALUE))
            .add(painel_cadastrar_area4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(painel_cadastrar_area4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(painel_cadastrar_area3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nome_EpocaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nome_EpocaKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==10){
            SalvarEpoca();
        }
}//GEN-LAST:event_nome_EpocaKeyPressed

    private void salvar_EpocaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvar_EpocaActionPerformed
        // TODO add your handling code here:
        SalvarEpoca();
}//GEN-LAST:event_salvar_EpocaActionPerformed

    private void combo_TemporadaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_TemporadaItemStateChanged
        // TODO add your handling code here:
        Temporada_id.setText(String.valueOf(bd_Temporada.getTemporadaIDNome((String)combo_Temporada.getSelectedItem())));
    }//GEN-LAST:event_combo_TemporadaItemStateChanged

    private void busca_temporadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busca_temporadaActionPerformed
        // TODO add your handling code here:
        Object objeto = null;
        if(!Epoca_id.getText().equals("0")){
            objeto = Integer.parseInt(Epoca_id.getText());
        }else if(!nome_Epoca.getText().equals("")){
            objeto = (String)nome_Epoca.getText();
        }
         kernel.Tela(10,kernel,1,objeto,null);
    }//GEN-LAST:event_busca_temporadaActionPerformed

    private void voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarActionPerformed
        // TODO add your handling code here:
        kernel.Tela(42, kernel, 0, null, null);
    }//GEN-LAST:event_voltarActionPerformed

    //SALVAR Epoca
    private void SalvarEpoca(){
        obj_Epoca = new Epoca();
        bd_Epoca  = new BD_Epoca(kernel);
        
        obj_Temporada = new Temporada();
        bd_Temporada  = new BD_Temporada(kernel);
        
        if(Epoca_id.getText().equals("0")){
            obj_Epoca.setNome(nome_Epoca.getText());
            obj_Temporada.setTemporada_id(Integer.parseInt(Temporada_id.getText()));
            obj_Epoca.setTemporada(obj_Temporada);
            if(!nome_Epoca.getText().equals("")){
                bd_Epoca.Salvar(obj_Epoca);
            }
            
        }else{            
            obj_Epoca.setNome(nome_Epoca.getText());
            obj_Epoca.setEpoca_id(Integer.parseInt(Epoca_id.getText()));
            obj_Temporada.setTemporada_id(Integer.parseInt(Temporada_id.getText()));
            obj_Epoca.setTemporada(obj_Temporada);
            bd_Epoca.Atualizar(obj_Epoca);
            Epoca_id.setText("0");
        }
        TabelaEpoca();
        nome_Epoca.setText("");         
        combo_Temporada.setSelectedIndex(0);
        //PREENCHER A TABELA DE DADOS COM AS ÁREAS
        
    }
    
    //TABELA Epoca
    public void TabelaEpoca(){
        
        if(objeto instanceof String){
            nome_Epoca.setText((String)objeto);
        }else if(objeto instanceof Integer){
            Epoca_id.setText(String.valueOf((Integer)objeto));
        }
        
        bd_Temporada = new BD_Temporada(kernel);
        /********* PREENCHENDO O VETOR Temporada *************/
        Temporada[] Temporada_vetor = null;
        try {
                Temporada_vetor = bd_Temporada.getTemporadas();
            } catch (SQLException exx) {
                Logger.getLogger(CadastrarEpoca.class.getName()).log(Level.SEVERE, null, exx);
            }
        String dados1[] = new String[Temporada_vetor.length];

        Temporada obj_Temporada = new Temporada();
        int pos = 0;
        for(int i=0; i < Temporada_vetor.length; i++){
            obj_Temporada = (Temporada)Temporada_vetor[i];
            dados1[i] = String.valueOf(obj_Temporada.getNome()).toUpperCase();
            if(acao!=0){                
                    if(acao==obj_Temporada.getTemporada_id()){
                        Temporada_id.setText(String.valueOf(obj_Temporada.getTemporada_id()));                                
                        pos = i;
                    }           
            }else if(i==0){
                Temporada_id.setText(String.valueOf(obj_Temporada.getTemporada_id()));
            }
        }
        combo_Temporada.setModel(new javax.swing.DefaultComboBoxModel(dados1));        
        
        if(acao!=0){
            combo_Temporada.setSelectedIndex(pos);
        }
        
        /*****************************************************************/
        //PREECHENDO A TABELA EPOCA
        bd_Epoca = new BD_Epoca(kernel);
        Epoca[] Epoca_vetor = null;
        try {
            //VERIFICAR SE É BUSCA OU NÃO        
            Epoca_vetor = bd_Epoca.getEpocas();
        } catch (SQLException ex2) {
            Logger.getLogger(CadastrarEpoca.class.getName()).log(Level.SEVERE, null, ex2);
        }
        
        
        String dados[][] = new String[Epoca_vetor.length][5];

        Epoca obj_Epoca = new Epoca();
        for(int i=0; i < Epoca_vetor.length; i++){
            obj_Epoca = (Epoca)Epoca_vetor[i];
            dados[i][0] = String.valueOf(obj_Epoca.getEpoca_id());
            dados[i][1] = String.valueOf(obj_Epoca.getNome());
            dados[i][2] = String.valueOf(obj_Epoca.getTemporada().getNome());
            dados[i][3] = "editar";
            if(kernel.getUsuario().getNivel()==0){        
            dados[i][4] = "excluir";
            }
         
        }
      
        
        tabela_Epoca.setModel(new javax.swing.table.DefaultTableModel(
            dados,
            new String [] {"Cod", "Época","Temporada","", ""}){
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class,java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
      
        tabela_Epoca.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tabela_Epoca.getColumnModel().getColumn(0).setPreferredWidth(50);
        tabela_Epoca.getColumnModel().getColumn(1).setPreferredWidth(205);        
        tabela_Epoca.getColumnModel().getColumn(2).setPreferredWidth(205);        
        tabela_Epoca.getColumnModel().getColumn(editar).setPreferredWidth(30);
        if(kernel.getUsuario().getNivel()==0){        
        tabela_Epoca.getColumnModel().getColumn(excluir).setPreferredWidth(30);
        }
        
        tabela_Epoca.setDragEnabled(true);
        sp.setViewportView(tabela_Epoca);        
        //ButtonColumn buttonColumn0 = new ButtonColumn(table, 0);//VER
        ButtonColumnEpoca buttonColumnEpoca1 = new ButtonColumnEpoca(tabela_Epoca, editar);//EDITAR
        if(kernel.getUsuario().getNivel()==0){        
        ButtonColumnEpoca buttonColumnEpoca2 = new ButtonColumnEpoca(tabela_Epoca, excluir);//EXCLUIR
        }
    }

    //CLASSE BUTTONCOLUMN Epoca
    class ButtonColumnEpoca extends AbstractCellEditor
         implements TableCellRenderer, TableCellEditor, ActionListener
     {
         JTable table;
         JButton renderButton;
         JButton editButton;
         String text;

         public ButtonColumnEpoca(JTable table, int column)
         {
             super();
             this.table = table;
             renderButton = new JButton();

             editButton = new JButton();
             
             editButton.setFocusPainted( false );
             editButton.addActionListener( this );

             TableColumnModel columnModel = table.getColumnModel();
             columnModel.getColumn(column).setCellRenderer( this );
             columnModel.getColumn(column).setCellEditor( this );
         }

         public Component getTableCellRendererComponent(
             JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
         {
             if (hasFocus)
             {
                 renderButton.setForeground(table.getForeground());
                 renderButton.setBackground(UIManager.getColor("Button.background"));
             }
             else if (isSelected)
             {
                 renderButton.setForeground(table.getSelectionForeground());
                 renderButton.setBackground(table.getSelectionBackground());
            }
             else
             {
                 renderButton.setForeground(table.getForeground());
                 renderButton.setBackground(UIManager.getColor("Button.background"));
             }

             renderButton.setBackground(new java.awt.Color(255, 255, 255));
             renderButton.setBorder(null);
             renderButton.setBorderPainted(false);
             renderButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

             text = (value == null) ? "" : value.toString();
             String imagem1 = text.equals("excluir")?"lixeira":"editar";
             renderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/"+imagem1+".png")));
             return renderButton;
         }

         public Component getTableCellEditorComponent(
             JTable table, Object value, boolean isSelected, int row, int column)
         {
             text = (value == null) ? "" : value.toString();             
             String imagem2 = text.equals("excluir")?"lixeira":"editar";
             editButton.setBackground(new java.awt.Color(255, 255, 255));
             editButton.setBorder(null);
             editButton.setBorderPainted(false);             
             editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/"+imagem2+".png")));
             editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
             //editButton.setText( text );
             return editButton;
         }

         public Object getCellEditorValue()
         {
             return text;
        }

         public void actionPerformed(ActionEvent e)
         {
             fireEditingStopped();

             switch(table.getSelectedColumn()){
                 case excluir:
                     SolicitaConfirmacaoEpoca();
                     TabelaEpoca();
                 break;
                 case editar:
                     int id_reg = Integer.parseInt(table.getValueAt(table.getSelectedRow(),0).toString());
                     obj_Epoca = bd_Epoca.getEpocaID(id_reg);
                     nome_Epoca.setText(obj_Epoca.getNome());
                     Epoca_id.setText(String.valueOf(obj_Epoca.getEpoca_id()));
                     Temporada_id.setText(String.valueOf(obj_Epoca.getTemporada().getTemporada_id()));
                     
                     combo_Temporada.setSelectedItem((Object)obj_Epoca.getTemporada().getNome().toUpperCase());
                             
                 break;
                 default:
                     kernel.Tela(0, kernel, 0,null,null);
                 break;
             }
             //System.out.println( "DADOS : " + table.getSelectedRow()+" "+" "+table.getSelectedColumn()+" "+table.getColumnCount()+" "+table.getValueAt(table.getSelectedRow(),0));
             
         }
     }
    private void SolicitaConfirmacaoEpoca(){
     boolean escolha = false;

     Object[] options = {"Sim",
                    "Não"};
    int resposta = JOptionPane.showOptionDialog(this,
        "Desejas excluir o registro ?",
        "Exclusão",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE,
        null,     //do not use a custom Icon
        options,  //the titles of buttons
        options[1]);
     
     if (resposta == 0) {
       bd_Epoca.Excluir(Integer.parseInt(tabela_Epoca.getValueAt(tabela_Epoca.getSelectedRow(),0).toString()));
     }
     
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Epoca_id;
    private javax.swing.JLabel Temporada_id;
    private javax.swing.JButton busca_temporada;
    private javax.swing.JComboBox combo_Temporada;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField nome_Epoca;
    private javax.swing.JPanel painel_cadastrar_area3;
    private javax.swing.JPanel painel_cadastrar_area4;
    private javax.swing.JPanel painel_cadastrar_area5;
    private javax.swing.JButton salvar_Epoca;
    private javax.swing.JScrollPane sp;
    private javax.swing.JTable tabela_Epoca;
    private javax.swing.JButton voltar;
    private javax.swing.JButton voltar1;
    // End of variables declaration//GEN-END:variables

}
