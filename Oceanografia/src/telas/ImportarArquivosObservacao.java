/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportarArquivos.java
 *
 * Created on 27/04/2011, 13:43:07
 */

package telas;

import banco.BD_Area;
import banco.BD_Categoria;
import banco.BD_Censo;
import banco.BD_Censo_Observacao;
import banco.BD_Data;
import banco.BD_Especie;
import banco.BD_Sexo;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import objetos.Area;
import objetos.Categoria;
import objetos.Data;
import objetos.Especie;
import objetos.Kernel;
import objetos.Sexo;

/**
 *
 * @author vagnerfeijomendes
 */
public class ImportarArquivosObservacao extends javax.swing.JPanel {
    
    private Kernel           kernel         = null;   
    private DefaultListModel lista          = new DefaultListModel();
    private FileReader reader               = null;
    private BD_Data    bd_Data              = null;
    private BD_Area    bd_Area              = null;
    private BD_Censo_Observacao bd_Censo    = null;
    private static File arquivo             = null;  
    private Area            obj_Area        = null;
    private Data            obj_Data        = null;      
    private int             acao;
    /** Creates new form ImportarArquivos */
    public ImportarArquivosObservacao(Kernel obj,int acao,Object texto) {
        this.kernel = obj;
        initComponents();   
        PreencherFormulario();        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painel_cadastrar_area = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabela_colunas = new javax.swing.JList();
        botao_importar = new javax.swing.JButton();
        selecionar_arquivo = new javax.swing.JButton();
        Sexo_id = new javax.swing.JLabel();
        Categoria_id = new javax.swing.JLabel();
        Especie_id = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        conteudo_arquivo = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(204, 204, 204));

        painel_cadastrar_area.setBackground(new java.awt.Color(204, 204, 204));
        painel_cadastrar_area.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Importador de dados"));

        jLabel1.setText("Selecione o arquivo:");

        jLabel5.setText("Colunas do arquivo");

        jScrollPane2.setViewportView(tabela_colunas);

        botao_importar.setText("Importar");
        botao_importar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_importarActionPerformed(evt);
            }
        });

        selecionar_arquivo.setText("Arquivo");
        selecionar_arquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecionar_arquivoActionPerformed(evt);
            }
        });

        Sexo_id.setForeground(new java.awt.Color(204, 204, 204));
        Sexo_id.setText("0");

        Categoria_id.setForeground(new java.awt.Color(204, 204, 204));
        Categoria_id.setText("0");

        Especie_id.setBackground(new java.awt.Color(0, 0, 0));
        Especie_id.setForeground(new java.awt.Color(204, 204, 204));
        Especie_id.setText("0");

        org.jdesktop.layout.GroupLayout painel_cadastrar_areaLayout = new org.jdesktop.layout.GroupLayout(painel_cadastrar_area);
        painel_cadastrar_area.setLayout(painel_cadastrar_areaLayout);
        painel_cadastrar_areaLayout.setHorizontalGroup(
            painel_cadastrar_areaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_areaLayout.createSequentialGroup()
                .add(painel_cadastrar_areaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(botao_importar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(selecionar_arquivo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(painel_cadastrar_areaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel5)
                    .add(painel_cadastrar_areaLayout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 193, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Especie_id)
                        .add(5, 5, 5)
                        .add(Categoria_id)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Sexo_id, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(591, Short.MAX_VALUE))
        );
        painel_cadastrar_areaLayout.setVerticalGroup(
            painel_cadastrar_areaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel_cadastrar_areaLayout.createSequentialGroup()
                .add(painel_cadastrar_areaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(painel_cadastrar_areaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(painel_cadastrar_areaLayout.createSequentialGroup()
                        .add(78, 78, 78)
                        .add(painel_cadastrar_areaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Especie_id)
                            .add(Categoria_id)
                            .add(Sexo_id)))
                    .add(painel_cadastrar_areaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(painel_cadastrar_areaLayout.createSequentialGroup()
                            .add(selecionar_arquivo)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(botao_importar))
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Dados no arquivo"));

        conteudo_arquivo.setColumns(20);
        conteudo_arquivo.setRows(5);
        jScrollPane3.setViewportView(conteudo_arquivo);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 937, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(painel_cadastrar_area, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(10, 10, 10))
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(painel_cadastrar_area, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 157, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selecionar_arquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecionar_arquivoActionPerformed
        // TODO add your handling code here:
        String imagens[]; 
        JFileChooser fc = new JFileChooser();   
        fc.setMultiSelectionEnabled(true);   
  
        fc.showOpenDialog(this);   
        arquivo = fc.getSelectedFile().getAbsoluteFile();
        if(fc.getSelectedFile()!=null){
            try {               
                
                //LENDO O ARQUIVO                   
                try {
                    reader = new FileReader(arquivo);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ImportarArquivosObservacao.class.getName()).log(Level.SEVERE, null, ex);
                }
                BufferedReader leitor = new BufferedReader(reader); 
                String linha = "";   
                String texto = "";
                int pos=1;
                
                while(leitor.ready()) {   
                    linha = leitor.readLine();                    
                    if(pos==1){ preencherTabelaColunas(linha.toUpperCase());}
                    String ln = "Linha "+pos+++": "+linha+"\n";                                        
                    texto += ln;
                } 
                conteudo_arquivo.setText(texto);                
                leitor.close();
            } catch (IOException ex) {
                Logger.getLogger(ImportarArquivosObservacao.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        
    }//GEN-LAST:event_selecionar_arquivoActionPerformed

    private void botao_importarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_importarActionPerformed
        // TODO add your handling code here:
        String txt = "Importando....\n\n";        
        try {
            ImportarDados(tabela_colunas.getSelectedValue());
        } catch (IOException ex) {
            Logger.getLogger(ImportarArquivosObservacao.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ImportarArquivosObservacao.class.getName()).log(Level.SEVERE, null, ex);
        }
        txt += tabela_colunas.getSelectedValue()+"\t [ok] \n ";   
        txt += "Importação encerrada com sucesso.";           
        conteudo_arquivo.setText(txt);
    }//GEN-LAST:event_botao_importarActionPerformed
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Categoria_id;
    private javax.swing.JLabel Especie_id;
    private javax.swing.JLabel Sexo_id;
    private javax.swing.JButton botao_importar;
    private javax.swing.JTextArea conteudo_arquivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel painel_cadastrar_area;
    private javax.swing.JButton selecionar_arquivo;
    private javax.swing.JList tabela_colunas;
    // End of variables declaration//GEN-END:variables

    private void preencherTabelaColunas(final String linha) {
        tabela_colunas.setModel(new javax.swing.AbstractListModel() {
            String []strings = linha.split(";");            
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });       
    }

    private void ImportarDados(Object obj) throws IOException, SQLException {
        String coluna = (String)obj;  
     //   System.out.println("COLUNA: "+coluna.toUpperCase());
        //LENDO O ARQUIVO 
        reader = new FileReader(arquivo);
        BufferedReader leitor = new BufferedReader(reader); 
        String linha = "";   
        String texto = "";
        String vetortitulocoluna[]  = null;
        String vetorlinhadados[]    = null;
        
        int pos=0;
        int posicaocoluna=0;
        while(leitor.ready()) {   
            linha = leitor.readLine();                    
            //COLETANDO A POSIÇÃO DA COLUNA PARA COLETAR OS DADOS 
            if(pos==0){ 
                vetortitulocoluna = linha.toUpperCase().split(";");
                for(int j=0; j < vetortitulocoluna.length; j++){
                 //   System.out.println(vetortitulocoluna[j].trim());                    
                    if(coluna.trim().toUpperCase().equals(vetortitulocoluna[j].trim()))
                        posicaocoluna = j;
                    
                }                
            }
            if(pos!=0){
                //COLENTADO OS DADOS DAS OUTRAS LINHAS NA COLUNA DESEJADA
                vetorlinhadados = linha.toUpperCase().split(";");            
                for(int j=0; j < vetorlinhadados.length; j++){                    
                   if(j==posicaocoluna){ InserirDadoTabela(vetorlinhadados[j],vetorlinhadados[0],vetorlinhadados[1]);}                    
                }
            }
            pos++;
        }
    }

    private void InserirDadoTabela(String valor,String data, String area) throws SQLException {
        //PEGAR A ESPECIE, CATEGORIA, DATA, AREA, SEXO        
        //BUSCANDO AREA
        if(!valor.equals("")){
            int area_id  = bd_Area.getAreaIDNome(area);
            int data_id  = bd_Data.getDataIDNome(data);             
            bd_Censo.ImportarObservacao(data_id,area_id,valor);
        }
    }

    private void PreencherFormulario() {
        bd_Area      = new BD_Area(kernel);
        bd_Data      = new BD_Data(kernel);
        bd_Censo     = new BD_Censo_Observacao(kernel);
    }  

}